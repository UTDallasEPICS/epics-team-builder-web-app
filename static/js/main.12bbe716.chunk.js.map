{"version":3,"sources":["widgets/common/Epics.png","reducers/setupPageReducer.js","actions/actionTypes/setupPageActionTypes.js","reducers/teamBuilderPageReducer.js","actions/actionTypes/teamBuilderActionTypes.js","reducers/index.js","store.js","widgets/common/Header.jsx","widgets/SetupPage/components/ManuallyAssignedStudents.jsx","widgets/SetupPage/components/ManuallyAssignProjects.jsx","widgets/SetupPage/components/ExcelReader.jsx","widgets/SetupPage/components/TeamSettings.jsx","widgets/SetupPage/components/SetupPage.jsx","actions/teamBuilderPageActions.js","widgets/SetupPage/containers/SetupPageContainer.jsx","actions/setupPageActions.js","widgets/TeamBuilderPage/components/AttributeCheckboxes.jsx","widgets/TeamBuilderPage/components/TeamCombinationTable/TeamComboRow.js","widgets/TeamBuilderPage/components/TeamCombinationTable/DisplayTeamCombinations.jsx","widgets/TeamBuilderPage/components/DisplayProjectsTable/DisplayProjectRow.js","widgets/TeamBuilderPage/components/DisplayProjectsTable/DisplayProjects.jsx","widgets/TeamBuilderPage/components/DisplayTeamInformations.jsx","widgets/TeamBuilderPage/components/DisplayUnassignedStudents.jsx","widgets/TeamBuilderPage/components/TeamBuilderPage.jsx","widgets/TeamBuilderPage/containers/TeamBuilderPageContainer.jsx","EpicsTeamBuilder.jsx","index.js"],"names":["module","exports","combineReducers","students","state","type","payload","projects","manuallyAssignedStudents","numOfPreferredProjects","maxChoicesConsidered","maxTeamSize","getSelectedCombo","getTeamCombos","setupPage","setupPageReducer","teamCombos","teamBuilderPageReducer","getStudents","getProjects","getManuallyAssignedStudents","getNumOfPreferredProjects","getMaxPossibleChoices","getMaxTeamSize","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","Header","className","src","require","alt","React","Component","MAS","onClickHandler","index","document","getElementById","checked","SL","OS","copy","Object","assign","inputElements","getElementsByClassName","i","value","id","this","props","removeStudent","studentsAssigned","temp","keys","key","push","studentLink","mapStudents","CardDeck","Card","border","Table","striped","bordered","hover","style","width","map","listValue","data-item","onClick","bind","textAlign","name","display","justifyContent","delete","ManuallyAssignProjects","addProjectToStudent","projectByStudentId","projectName","project","length","currStudentID","assignProjToStudents","onProjectClickHandler","forEach","onStudentClickHandler","defaultChecked","student","parseInt","ExcelReader","getExtension","fileName","split","onProjectInputClick","projectInputRef","current","click","onStudentInputClick","studentInputRef","onProjectDrop","files","event","target","handleChangeProjects","onStudentDrop","handleChangeStudents","projectFileName","studentFileName","createRef","projectBtnRef","studentBtnRef","numProjects","e","alert","setState","handleProjectFile","blur","handleStudentFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","tempContainer","actualColNames","columnCount","decode_range","c","encode_col","v","error","reduce","accumalator","includes","slice","projectsArray","skillsArray","returning","skills","changeProjectsArray","readAsArrayBuffer","changeStudentsArray","setMaxPossibleChoices","changeNumOfPreferredProjects","setMaxTeamSize","choiceArray","incorrectStudents","studentsArray","studentMajor","substring","indexOf","studentSkillsArray","studentChoices","choice","some","response","choices","major","classification","gender","found_team","choice_num_awarded","join","Math","ceil","onDrop","getRootProps","getInputProps","isDragActive","disabled","ref","accept","onChange","TeamSettings","a","Number","SetupPage","numOfPrefProjects","maxPossibleChoices","switchToTeamBuilder","defaultProps","findTeamForStudent","teams","team","j","members","assigned","k","splice","selectCombination","connect","dispatch","comboInformation","AttributeCheckboxes","setChecked","handleToggle","currentCategoryName","newCheckedCategory","display_name","TeamComboRow","combo","selectTeam","Fragment","avgScoreChoice","toFixed","avgScoreClass","skillsMetRatio","coVarMembers","unassignedStudents","DisplayTeamCombinations","selectCombo","regrenerateTeam","loading","height","Spinner","animation","role","size","orderBy","attribute","noResponseStudents","marginTop","borderRadius","DisplayProjectRow","teamName","DisplayProjects","newData","membersArr","rowData","member","trim","choiceRows","s","skillSet","getCSV","headers","label","DisplayTeamInformations","Col","skill","DisplayUnassignedStudents","TeamBuilderPage","setCombo","setTeam","setTimeout","waitToGenerateTeams","exportBtn","switchTooltipText","stopPropagation","showTooltip","hideTooltipText","renderTopSection","switchToSetup","renderTeamCombinations","renderViewProjects","renderUnassignedStudents","renderTeamInformations","prevProps","prevState","generateTeams","Row","xs","md","teamInformation","tempStudents","JSON","parse","stringify","sid","filter","randomStudents","newTeams","floor","random","wrongNames","firstName","lastName","w","console","log","smallTeams","largeTeams","sTeam","sTeamFilled","lTeam","pop","ind","unassignedReturn","unassignedNormal","teamAverageChoice","teamAverageClass","totalWeighedTeams","teamTotalClass","teamTotalChoice","teamMembers","abs","skillsMet","avgSkillsMet","exp","staDevSkillsMet","sqrt","skillsMetWeight","totalMembers","avgMembersPerTeam","EpicsTeamBuilder","showSetupPage","ReactDOM","render"],"mappings":"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","file":"static/js/main.12bbe716.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Epics.183416a8.png\";","import { combineReducers } from 'redux';\nimport {\n  CHANGE_NUM_PROJECT_SLIDER,\n  CHANGE_STUDENTS_ARRAY,\n  CHANGE_PROJECTS_ARRAY,\n  ASSIGN_PROJ_TO_STUDENT,\n  REMOVE_STUDENT,\n  SET_MAX_POSSIBLE_CHOICES,\n  SET_MAX_TEAM_SIZE\n} from 'actions/actionTypes/setupPageActionTypes';\n\nconst students = (state = [], { type, payload }) => {\n  switch (type) {\n    case CHANGE_STUDENTS_ARRAY:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst projects = (state = [], { type, payload }) => {\n  switch (type) {\n    case CHANGE_PROJECTS_ARRAY:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst manuallyAssignedStudents = (state = {}, { type, payload }) => {\n  switch (type) {\n    case REMOVE_STUDENT:\n      return payload;\n    case ASSIGN_PROJ_TO_STUDENT:\n      return {\n        ...state,\n        ...payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst numOfPreferredProjects = (state = 6, { type, payload }) => {\n  switch (type) {\n    case CHANGE_NUM_PROJECT_SLIDER:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst maxChoicesConsidered = (state = 0, { type, payload }) => {\n  switch (type) {\n    case SET_MAX_POSSIBLE_CHOICES:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst maxTeamSize = (state = 5, { type, payload }) => {\n  switch (type) {\n    case SET_MAX_TEAM_SIZE:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  students,\n  projects,\n  manuallyAssignedStudents,\n  numOfPreferredProjects,\n  maxChoicesConsidered,\n  maxTeamSize\n});\n","//Slider types\nexport const CHANGE_NUM_PROJECT_SLIDER = 'CHANGE_NUM_PROJECT_SLIDER';\nexport const CHANGE_PROJECTS_ARRAY = 'CHANGE_PROJECTS_ARRAY';\nexport const CHANGE_STUDENTS_ARRAY = 'CHANGE_STUDENT_ARRAY';\nexport const ASSIGN_PROJ_TO_STUDENT = 'ASSIGN_PROJ_TO_STUDENT';\nexport const REMOVE_STUDENT = 'REMOVE_STUDENT';\nexport const SET_MAX_POSSIBLE_CHOICES = 'SET_MAX_POSSIBLE_CHOICES';\nexport const SET_MAX_TEAM_SIZE = 'SET_MAX_TEAM_SIZE';\n","import { combineReducers } from 'redux';\nimport { INITIATE_TEAM_GENERATION } from '../actions/actionTypes/teamBuilderActionTypes';\nimport { SELECT_TEAM_COMBINATION } from '../actions/actionTypes/teamBuilderActionTypes';\n\nconst getTeamCombos = (state = [], { type, payload }) => {\n  switch (type) {\n    case INITIATE_TEAM_GENERATION:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst getSelectedCombo = (state = {}, { type, payload }) => {\n  switch (type) {\n    case SELECT_TEAM_COMBINATION:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  getSelectedCombo,\n  getTeamCombos\n});\n","export const INITIATE_TEAM_GENERATION = 'INITIATE_TEAM_GENERATION';\nexport const SELECT_TEAM_COMBINATION = 'SELECT_TEAM_COMBINATION';\n","import { combineReducers } from 'redux';\nimport setupPageReducer from './setupPageReducer';\nimport teamBuilderPageReducer from './teamBuilderPageReducer';\n\nexport default combineReducers({\n  setupPage: setupPageReducer,\n  teamCombos: teamBuilderPageReducer\n});\n\n//Setup Page Selectors\nexport const getStudents = state => state.setupPage.students;\nexport const getProjects = state => state.setupPage.projects;\nexport const getManuallyAssignedStudents = state => state.setupPage.manuallyAssignedStudents;\nexport const getNumOfPreferredProjects = state => state.setupPage.numOfPreferredProjects;\nexport const getMaxPossibleChoices = state => state.setupPage.maxChoicesConsidered;\nexport const getMaxTeamSize = state => state.setupPage.maxTeamSize;\n\n//Team Builder Page Selectors\nexport const getTeamCombos = state => state.teamCombos.getTeamCombos;\nexport const getSelectedCombo = state => state.teamCombos.getSelectedCombo;\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nconst initialState = {};\n\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n\n  initialState,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className='header-container'>\n        <div className='header'>\n          <img src={require('./Epics.png')} alt={\"EPIC's Logo\"} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default class MAS extends React.Component {\n  delete(SL, OS) {\n    var copy = Object.assign({}, OS);\n    var inputElements = document.getElementsByClassName('messageCheckbox');\n    for (var i = 0; inputElements[i]; ++i) {\n      if (inputElements[i].checked) {\n        delete copy[SL[inputElements[i].value].id];\n        inputElements[i].checked = false;\n      }\n    }\n    this.props.removeStudent(copy);\n  }\n\n  onClickHandler = index => {\n    if (document.getElementById('checkbox' + index).checked === true) {\n      document.getElementById('checkbox' + index).checked = false;\n    } else {\n      document.getElementById('checkbox' + index).checked = true;\n    }\n  };\n\n  mapStudents(students, studentsAssigned) {\n    var temp = [];\n    for (var key of Object.keys(students)) {\n      if (students[key].id in studentsAssigned) {\n        temp.push(students[key]);\n      }\n    }\n    return temp;\n  }\n  render() {\n    let { manuallyAssignedStudents, students } = this.props;\n    let studentLink = this.mapStudents(students, manuallyAssignedStudents);\n    return (\n      <div className='manual-project-assignment'>\n        <label className='title'>Manually Assigned Students</label>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '8%' }}></th>\n                  <th style={{ width: '20%' }}>Name</th>\n                  <th style={{ width: '20%' }}>NetID</th>\n                  <th style={{ width: '42%' }}>Project Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {studentLink.map((listValue, index) => {\n                  return (\n                    <tr key={index} data-item={listValue} onClick={this.onClickHandler.bind(this, index)}>\n                      <td style={{ textAlign: 'center' }}>\n                        <input\n                          id={'checkbox' + index}\n                          className='messageCheckbox'\n                          type='checkbox'\n                          name='box'\n                          value={index}\n                          onClick={this.onClickHandler.bind(this, index)}\n                        ></input>\n                      </td>\n                      <td>{listValue.name}</td>\n                      <td>{listValue.id}</td>\n                      <td>{manuallyAssignedStudents[listValue.id]}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button\n            className='red'\n            type='submit'\n            style={{ width: '140px' }}\n            onClick={() => this.delete(studentLink, manuallyAssignedStudents)}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nMAS.propTypes = {\n  students: PropTypes.array,\n  manuallyAssignedStudents: PropTypes.object,\n  changeStudentsArray: PropTypes.func,\n  removeStudent: PropTypes.func\n};\n","import React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default class ManuallyAssignProjects extends React.Component {\n  addProjectToStudent = () => {\n    const { projects, students } = this.props;\n    let projectByStudentId = {};\n\n    //Get name of selected project\n    let projectName = null;\n    for (let project of projects) {\n      if (document.getElementById(project.name).checked) {\n        projectName = project.name;\n        break;\n      }\n    }\n\n    //Exit function if no projects were selected\n    if (!projectName) {\n      return;\n    }\n    document.getElementById(projectName).checked = false;\n\n    //Map checked students to checked project\n    for (var i = 0; i < students.length; i++) {\n      var currStudentID = students[i]['id'];\n\n      if (document.getElementById(currStudentID) && document.getElementById(currStudentID).checked) {\n        document.getElementById(currStudentID).checked = false;\n        projectByStudentId[currStudentID] = projectName;\n      }\n    }\n    this.props.assignProjToStudents(projectByStudentId);\n  };\n\n  //Handle clicks on table row to effect associated checkbox\n  onProjectClickHandler = name => {\n    this.props.projects.forEach(project => {\n      if (project.name !== name) {\n        document.getElementById(project.name).checked = false;\n      }\n    });\n    document.getElementById(name).checked = !document.getElementById(name).checked;\n  };\n\n  onStudentClickHandler = id => {\n    document.getElementById(id).checked = !document.getElementById(id).checked;\n  };\n\n  render() {\n    const { students, projects, manuallyAssignedStudents } = this.props;\n    return (\n      <div className='manual-project-assignment'>\n        <label className='title'>Manual Project Assignment</label>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '15%' }}></th>\n                  <th>Project Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {projects.map((project, index) => {\n                  return (\n                    <tr key={index} onClick={this.onProjectClickHandler.bind(this, project.name)}>\n                      <td>\n                        <input\n                          type='radio'\n                          onClick={this.onProjectClickHandler.bind(this, project.name)}\n                          defaultChecked={false}\n                          id={project.name}\n                        />\n                      </td>\n                      <td>{project.name}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '15%' }}></th>\n                  <th>Name</th>\n                  <th>NetID</th>\n                </tr>\n              </thead>\n              <tbody>\n                {students.map((student, index) => {\n                  //If student has already been assigned, don't show them on table\n                  for (let id in manuallyAssignedStudents) {\n                    if (parseInt(id) === student.id) {\n                      return null;\n                    }\n                  }\n                  return (\n                    <tr key={index} onClick={this.onStudentClickHandler.bind(this, student.id)}>\n                      <td>\n                        <input\n                          type='checkbox'\n                          className='studentBox'\n                          defaultChecked={false}\n                          id={student.id}\n                          onClick={this.onStudentClickHandler.bind(this, student.id)}\n                        />\n                      </td>\n                      <td>{student.name}</td>\n                      <td>{student.id}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button className='green' style={{ width: '140px' }} onClick={this.addProjectToStudent}>\n            Add\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nManuallyAssignProjects.propTypes = {\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  manuallyAssignedStudents: PropTypes.object,\n  assignProjToStudents: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport XLSX from 'xlsx';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projectFileName: 'Or drag file here',\n      studentFileName: 'Or drag file here'\n    };\n\n    this.projectInputRef = React.createRef();\n    this.studentInputRef = React.createRef();\n    this.projectBtnRef = React.createRef();\n    this.studentBtnRef = React.createRef();\n    this.handleChangeProjects = this.handleChangeProjects.bind(this);\n    this.handleChangeStudents = this.handleChangeStudents.bind(this);\n    this.numProjects = 0;\n  }\n\n  getExtension = fileName => {\n    let temp = fileName.split('.');\n    return temp[temp.length - 1];\n  };\n\n  handleChangeProjects(e) {\n    const files = e.target.files;\n    if (files && files[0]) {\n      if (this.getExtension(files[0].name) !== 'xlsx') {\n        //Remove file from input component\n        e.target.value = '';\n        return alert('File must be of type xlsx');\n      }\n      this.setState({ projectFileName: files[0].name });\n      this.handleProjectFile(files[0]);\n    }\n    this.projectBtnRef.current.blur();\n  }\n\n  handleChangeStudents(e) {\n    const files = e.target.files;\n    if (files && files[0]) {\n      if (this.getExtension(files[0].name) !== 'xlsx') {\n        //Remove file from input component\n        e.target.value = '';\n        return alert('File must be of type xlsx');\n      }\n      this.setState({ studentFileName: files[0].name });\n      this.handleStudentFile(files[0]);\n    }\n    this.studentBtnRef.current.blur();\n  }\n\n  handleProjectFile(file) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n\n      let tempContainer = {\n        file: file,\n        data\n      };\n\n      //Check for correct columns in project file\n      let expectedColNames = ['Skill 1', 'Skill 2', 'Skill 3', 'Returning (Y/N)', 'Project Name'];\n\n      let actualColNames = [];\n      const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;\n      for (let i = 0; i < columnCount; ++i) {\n        actualColNames[i] = ws[`${XLSX.utils.encode_col(i)}1`].v;\n      }\n\n      let error = expectedColNames.reduce((accumalator, name) => {\n        if (!actualColNames.includes(name)) {\n          accumalator += ' ' + name + ',';\n        }\n        return accumalator;\n      }, 'Missing columns:');\n\n      if (error.length > 16) {\n        this.setState({ projectFileName: 'Or drag file here' });\n        return alert(error.slice(0, -1));\n      }\n\n      //Reduce file object down to new object with formatted data\n      let projectsArray = tempContainer.data.reduce((accumalator, project) => {\n        let skillsArray = [project['Skill 1'], project['Skill 2'], project['Skill 3']];\n\n        accumalator.push({\n          name: project['Project Name'] ? project['Project Name'] : 'N/A',\n          returning: project['Returning (Y/N)'] === 'Y',\n          skills: skillsArray[0] ? skillsArray : []\n        });\n        return accumalator;\n      }, []);\n\n      this.props.changeProjectsArray(projectsArray);\n      this.numProjects = projectsArray.length\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  handleStudentFile(file) {\n    const { changeStudentsArray, setMaxPossibleChoices, changeNumOfPreferredProjects, setMaxTeamSize } = this.props;\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n\n      let tempContainer = {\n        file: file,\n        data\n      };\n\n      //                  Check for correct columns in student file\n      let expectedColNames = [\n        'Student',\n        'Response Date',\n        'SSO ID',\n        'Course',\n        'Student Major',\n        'Student Classification',\n        'Gender',\n        'Skill 1',\n        'Skill 2',\n        'Skill 3'\n      ];\n\n      let actualColNames = [];\n      const choiceArray = []\n      const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;\n      for (let i = 0; i < columnCount; ++i) {\n        actualColNames[i] = ws[`${XLSX.utils.encode_col(i)}1`].v;\n        if (actualColNames[i].includes(\"Choice\")) choiceArray.push(actualColNames[i])\n      }\n      setMaxPossibleChoices(choiceArray.length)\n      changeNumOfPreferredProjects(choiceArray.length)\n\n      let error = expectedColNames.reduce((accumalator, name) => {\n        if (!actualColNames.includes(name)) {\n          accumalator += ' ' + name + ',';\n        }\n        return accumalator;\n      }, 'Missing columns:');\n\n      if (error.length > 16) {\n        this.setState({ studentFileName: 'Or drag file here' });\n        return alert(error.slice(0, -1));\n      }\n      const incorrectStudents = []\n      //Reduce file object down to new object with formatted data\n      let studentsArray = tempContainer.data.reduce((accumalator, student) => {\n        if (student['Student Major']) {\n          var studentMajor = student['Student Major'].substring(\n            student['Student Major'].indexOf('::::') + 4,\n            student['Student Major'].length\n          );\n        }\n\n        let studentSkillsArray = [student['Skill 1'], student['Skill 2'], student['Skill 3']];\n\n        let studentChoices = choiceArray.map(choice => student[choice])\n        if(studentChoices.some(c => !c) || studentSkillsArray.some(c => !c)) {\n          incorrectStudents.push(student[\"Student\"]) \n        }\n        else {\n          accumalator.push({\n            name: student['Student'] ? student['Student'] : 'N/A',\n            response: student['Response Date'] ? true : false,\n            id: student['SSO ID'] ? student['SSO ID'] : 'N/A',\n            returning: student['Course'] === 'EPCS 3200',\n            choices: studentChoices,\n            major: studentMajor,\n            classification: student['Student Classification'] ? student['Student Classification'] : 'N/A',\n            gender: student['Gender'] ? student['Gender'] : 'N/A',\n            skills: studentSkillsArray[0] ? studentSkillsArray : [],\n            found_team: false,\n            choice_num_awarded: 0\n          });\n        }\n\n        return accumalator;\n      }, []);\n      if (incorrectStudents.length) alert(`The following students have not filled out one or more skills/choices: \\n ${incorrectStudents.join(\"\\n\")}`)\n      changeStudentsArray(studentsArray);\n      setMaxTeamSize(Math.ceil(studentsArray.length/this.numProjects))\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  onProjectInputClick = () => {\n    this.projectInputRef.current.click();\n  };\n\n  onStudentInputClick = () => {\n    this.studentInputRef.current.click();\n  };\n\n  //Setup file drops like a normal file input event\n  onProjectDrop = files => {\n    const event = { target: { files } };\n    this.handleChangeProjects(event);\n  };\n\n  onStudentDrop = files => {\n    const event = { target: { files } };\n    this.handleChangeStudents(event);\n  };\n\n  render() {\n    const { projectFileName, studentFileName } = this.state;\n\n    return (\n      <div className='file-uploader'>\n        <Dropzone onDrop={this.onProjectDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <div {...getRootProps()} className={isDragActive ? 'drag-box' : ''}>\n              <input {...getInputProps()} disabled={true} />\n              <div className='upload-project'>\n                <button className='orange' onClick={this.onProjectInputClick} ref={this.projectBtnRef}>\n                  Upload Project Files\n                </button>\n                <input\n                  id='projectInput'\n                  type='file'\n                  accept='.xlsx'\n                  style={{ display: 'none' }}\n                  ref={this.projectInputRef}\n                  onChange={this.handleChangeProjects}\n                />\n                <label className='file-name-display'>{projectFileName}</label>\n              </div>\n            </div>\n          )}\n        </Dropzone>\n        <Dropzone onDrop={this.onStudentDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <div {...getRootProps()} className={isDragActive ? 'drag-box' : ''}>\n              <input {...getInputProps()} disabled={true} />\n              <div className='upload-students'>\n                <button className='orange' onClick={this.onStudentInputClick} ref={this.studentBtnRef}>\n                  Upload Student Files\n                </button>\n                <input\n                  id='studentInput'\n                  type='file'\n                  accept='.xlsx'\n                  style={{ display: 'none' }}\n                  ref={this.studentInputRef}\n                  onChange={this.handleChangeStudents}\n                />\n                <label className='file-name-display'>{studentFileName}</label>\n              </div>\n            </div>\n          )}\n        </Dropzone>\n      </div>\n    );\n  }\n}\n\nExcelReader.propTypes = {\n  changeProjectsArray: PropTypes.func,\n  changeStudentsArray: PropTypes.func,\n  setMaxPossibleChoices: PropTypes.func,\n  maxPossibleChoices: PropTypes.number,\n  setMaxTeamSize: PropTypes.func\n};\nexport default ExcelReader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TeamSettings({ maxTeamSize, setMaxTeamSize }) {\n\n  const updateTeamSize = (a) => {\n    setMaxTeamSize(Number(a.target.value))\n  }\n\n  return (\n    <div className='preferred-project-slider'>\n      <div className='auto-checkbox-container'>\n        <div className=\"team-size-input\">\n          <p>Max Team Size: </p>\n          <input type=\"number\" value={maxTeamSize} onChange={updateTeamSize}></input>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nTeamSettings.propTypes = {\n  numOfPrefProjects: PropTypes.number,\n  maxPossibleChoices: PropTypes.number,\n  changeNumOfPreferredProjects: PropTypes.func,\n  maxTeamSize: PropTypes.number,\n  setMaxTeamSize: PropTypes.func\n};\nexport default TeamSettings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from 'widgets/common/Header';\nimport MAS from './ManuallyAssignedStudents';\nimport ManuallyAssignProjects from './ManuallyAssignProjects';\nimport ExcelReader from './ExcelReader';\nimport TeamSettings from './TeamSettings';\n\nclass SetupPage extends React.Component {\n  render() {\n    const {\n      numOfPrefProjects,\n      students,\n      projects,\n      assignProjToStudents,\n      changeStudentsArray,\n      changeProjectsArray,\n      manuallyAssignedStudents,\n      removeStudent,\n      setMaxPossibleChoices,\n      setMaxTeamSize,\n      maxTeamSize,\n      maxPossibleChoices,\n      changeNumOfPreferredProjects,\n      switchToTeamBuilder\n    } = this.props;\n\n    return (\n      <div className='setup-page'>\n        <Header />\n        <div className='setup-grid'>\n          <ExcelReader\n            changeStudentsArray={changeStudentsArray}\n            changeProjectsArray={changeProjectsArray}\n            setMaxPossibleChoices={setMaxPossibleChoices}\n            maxPossibleChoices={maxPossibleChoices}\n            changeNumOfPreferredProjects={changeNumOfPreferredProjects}\n            setMaxTeamSize={setMaxTeamSize}\n          />\n\n          <ManuallyAssignProjects\n            students={students}\n            projects={projects}\n            assignProjToStudents={assignProjToStudents}\n            changeStudentsArray={changeStudentsArray}\n            manuallyAssignedStudents={manuallyAssignedStudents}\n          />\n          <div className='manually-assigned-students'>\n            <MAS\n              students={students}\n              manuallyAssignedStudents={manuallyAssignedStudents}\n              removeStudent={removeStudent}\n            />\n          </div>\n        </div>\n        <TeamSettings\n          numOfPrefProjects={numOfPrefProjects}\n          maxPossibleChoices={maxPossibleChoices}\n          changeNumOfPreferredProjects={changeNumOfPreferredProjects}\n          maxTeamSize={maxTeamSize}\n          setMaxTeamSize={setMaxTeamSize}\n        /> \n        <button\n          className='orange generate-teams-btn'\n          onClick={switchToTeamBuilder}\n          disabled={students.length === 0 || projects.length === 0}\n        >\n          Build Teams\n        </button>\n      </div>\n    );\n  }\n}\n\nSetupPage.defaultProps = {\n  numOfPrefProjects: 6,\n  students: [],\n  projects: [],\n  manuallyAssignedStudents: {}\n};\n\nSetupPage.propTypes = {\n  changeNumOfPreferredProjects: PropTypes.func,\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  assignProjToStudents: PropTypes.func,\n  changeProjectsArray: PropTypes.func,\n  changeStudentsArray: PropTypes.func,\n  switchToTeamBuilder: PropTypes.func,\n  setMaxPossibleChoices: PropTypes.func,\n  manuallyAssignedStudents: PropTypes.object,\n  generateTeams: PropTypes.func,\n  removeStudent: PropTypes.func,\n  numOfPrefProjects: PropTypes.number,\n  maxPossibleChoices: PropTypes.number\n};\n\nexport default SetupPage;\n","import { INITIATE_TEAM_GENERATION } from './actionTypes/teamBuilderActionTypes';\nimport { SELECT_TEAM_COMBINATION } from './actionTypes/teamBuilderActionTypes';\n\nexport const generateTeams = ({ projects, students, manuallyAssignedStudents, numOfPrefProjects, maxTeamSize }) => {\n  const teams = {};\n  let tempStudents = JSON.parse(JSON.stringify(students));\n  projects.forEach(project => {\n    teams[`${project.name}`] = {\n      project,\n      members: [],\n      value: 0\n    };\n  });\n\n  //First assign manually assigned students\n  for (let sid in manuallyAssignedStudents) {\n    //Change students to map from sid to their info\n    for (let i = 0; i < tempStudents.length; i++) {\n      if (parseInt(tempStudents[i].id) === parseInt(sid)) {\n        tempStudents[i].assigned = true;\n        teams[manuallyAssignedStudents[sid]].members.push(tempStudents[i]);\n        tempStudents.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  //Pull out all students who did not respond\n  let noResponseStudents = tempStudents.filter(student => !student.response);\n  tempStudents = tempStudents.filter(student => student.response);\n\n  //Let returning students get priority in project choice first\n  for (let i = 0; i < tempStudents.length; i++) {\n    if (tempStudents[i].returning) {\n      for (let j = 0; j < tempStudents[i].choices.length; j++) {\n        if (teams[`${tempStudents[i].choices[j]}`].members.length < maxTeamSize) {\n          tempStudents[i].choice_num_awarded = j + 1;\n          teams[`${tempStudents[i].choices[j]}`].members.push(tempStudents[i]);\n          tempStudents.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  let teamCombos = [];\n  //Loop through creation of teams\n  for (let i = 0; i < 1000; i++) {\n    //Make copies to start off on\n    let randomStudents = JSON.parse(JSON.stringify(tempStudents));\n    let newTeams = JSON.parse(JSON.stringify(teams));\n\n    //Shuffle students to hopefully get different results\n    for (var k = randomStudents.length - 1; k > 0; k--) {\n      var j = Math.floor(Math.random() * (k + 1));\n      let temp = randomStudents[k];\n      randomStudents[k] = randomStudents[j];\n      randomStudents[j] = temp;\n    }\n    let wrongNames = []\n    //Place normal students in their top choices if possible\n    for (let j = randomStudents.length - 1; j >= 0; j--) {\n      for (let k = 0; k < numOfPrefProjects; k++) {\n        if (randomStudents[j].choices[k]) {\n          if (!newTeams[`${randomStudents[j].choices[k]}`]) {\n            wrongNames.push({name: `${randomStudents[i].firstName} ${randomStudents[i].lastName}`, choice: k})\n          } else if (newTeams[`${randomStudents[j].choices[k]}`].members.length < 3) {\n            randomStudents[j].choice_num_awarded = k + 1;\n            newTeams[`${randomStudents[j].choices[k]}`].members.push(randomStudents[j]);\n            randomStudents.splice(j, 1);\n            break;\n          }\n        }\n      }\n    }\n    if (wrongNames.length) \n      alert(`Following students have nonexistent choices: \\n ${wrongNames.map(w => w.name + \", choice \" + w.choice).join(\"\\n\")}`)\n\n    //Try to find teams for students who still have not been placed on a team\n    for (let j = randomStudents.length - 1; j >= 0; j--) {\n      if (findTeamForStudent(randomStudents[j], newTeams, numOfPrefProjects, maxTeamSize)) {\n        randomStudents.splice(j, 1);\n      }\n    }\n\n    //Check if a student couldn't be assigned to any of their choices\n    if (randomStudents.length > 1) {\n      console.log(randomStudents)\n      console.log('Students who responded could not be placed on team based on choices');\n    }\n\n    let smallTeams = [];\n    let largeTeams = [];\n\n    //seperate teams into categories based on size\n    for (let teamName in newTeams) {\n      if (newTeams[teamName].members.length < 3) {\n        smallTeams.push(newTeams[teamName]);\n      } else if (newTeams[teamName].members.length > 3) {\n        largeTeams.push(newTeams[teamName]);\n      }\n    }\n\n    //go through every small team and check if students from larger teams can be swapped over\n    while (smallTeams.length > 0) {\n      let sTeam = smallTeams[0];\n      let sTeamFilled = false;\n\n      for (let j = largeTeams.length - 1; j >= 0; j--) {\n        let lTeam = largeTeams[j];\n\n        for (let k = lTeam.members.length - 1; k >= 0; k--) {\n          let member = lTeam.members[k];\n          if (member.returning || member.assigned) {\n            continue;\n          }\n\n          if (lTeam.members.length <= 3) {\n            largeTeams.pop();\n            break;\n          }\n\n          member.choices.forEach((choice, ind) => {\n            if (choice === sTeam.project.name) {\n              member.choice_num_awarded = ind + 1;\n              newTeams[`${sTeam.project.name}`].members.push(member);\n              newTeams[`${lTeam.project.name}`].members.splice(k, 1);\n            }\n          });\n\n          if (newTeams[`${sTeam.project.name}`].members.length >= 3) {\n            sTeamFilled = true;\n            break;\n          }\n        }\n        if (sTeamFilled) break;\n      }\n      smallTeams.pop();\n    }\n    let unassignedReturn = 0;\n    let unassignedNormal = 0;\n    randomStudents.forEach(student => {\n      student.returning ? unassignedReturn++ : unassignedNormal++;\n    });\n\n    //Calculate weights for choices and classification\n    let teamAverageChoice = 0;\n    let teamAverageClass = 0;\n    let totalWeighedTeams = 0;\n    for (let team in newTeams) {\n      let teamTotalClass = 0;\n      let teamTotalChoice = 0;\n\n      //Filter out assigned and returning students from calculations\n      let teamMembers = newTeams[team].members.filter(student =>\n        student.returning || student.assigned ? false : true\n      );\n\n      if (teamMembers.length === 0) {\n        continue;\n      }\n\n      //Calculate the average choice and spread of students by classsification\n      teamMembers.forEach(student => {\n        teamTotalChoice += student.choice_num_awarded;\n        switch (student.classification) {\n          case 'Freshman':\n            teamTotalClass += -2;\n            break;\n          case 'Sophomore':\n            teamTotalClass += -1;\n            break;\n          case 'Junior':\n            teamTotalClass += 1;\n            break;\n          case 'Senior':\n            teamTotalClass += 2;\n            break;\n          default:\n            break;\n        }\n      });\n      teamAverageChoice += teamTotalChoice / teamMembers.length;\n      teamAverageClass += teamTotalClass / teamMembers.length;\n      totalWeighedTeams++;\n    }\n\n    //Value is the average choice a student is given. The lower the better\n\n    let avgScoreChoice = teamAverageChoice / totalWeighedTeams;\n    //Value is weight ranging from 0 to 1. The closer to 0, the better spread of students by grade\n    let avgScoreClass = Math.abs(teamAverageClass / totalWeighedTeams) / 2;\n\n    let skillsMet = 0;\n    //For each team find how many skills are met by its members\n    for (let team in newTeams) {\n      newTeams[team].skillsMet = 0;\n      for (let skill of newTeams[team].project.skills) {\n        for (let member of newTeams[team].members) {\n          if (member.skills.includes(skill)) {\n            skillsMet++;\n            newTeams[team].skillsMet++;\n          }\n        }\n      }\n    }\n\n    //average skills met per team\n    let avgSkillsMet = skillsMet / Object.keys(newTeams).length;\n\n    let temp = 0;\n    for (let team in newTeams) {\n      temp += Math.exp(newTeams[team].skillsMet - avgSkillsMet, 2);\n    }\n\n    let staDevSkillsMet = Math.sqrt(temp / skillsMet);\n\n    //use normalized average and coefficient of variation as weights\n    let skillsMetWeight =\n      avgSkillsMet / newTeams[Object.keys(newTeams)[0]].project.skills.length + (staDevSkillsMet / avgSkillsMet) * -0.2;\n\n    let totalMembers = 0;\n    for (let team in newTeams) {\n      totalMembers += newTeams[team].members.length;\n    }\n\n    let avgMembersPerTeam = totalMembers / Object.keys(newTeams).length;\n    temp = 0;\n    for (let team in newTeams) {\n      temp += Math.exp(newTeams[team].members.length - avgMembersPerTeam, 2);\n    }\n\n    let coVarMembers = Math.sqrt(temp / totalMembers) / avgMembersPerTeam;\n\n    teamCombos.push({\n      teams: newTeams,\n      avgScoreChoice,\n      avgScoreClass,\n      skillsMetRatio: skillsMetWeight,\n      coVarMembers,\n      unassignedReturn,\n      unassignedNormal,\n      noResponseStudents,\n      unassignedStudents: randomStudents\n    });\n  }\n\n  return {\n    type: INITIATE_TEAM_GENERATION,\n    payload: teamCombos\n  };\n};\n\nfunction findTeamForStudent(student, teams, numOfPrefProjects, maxTeamSize) {\n  //Iterate through student's choices\n  for (let i = 0; i < numOfPrefProjects && i < student.choices.length; i++) {\n    let team = teams[`${student.choices[i]}`];\n    //Check if member on team has another choice which they can switch to\n    for (let j = team.members.length - 1; j >= 0; j--) {\n      if (!team.members[j].returning && !team.members[j].assigned) {\n        for (let k = 0; k < numOfPrefProjects; k++) {\n          //If member can be moved to new team, move student and then add other student to team\n          if (teams[`${team.members[j].choices[k]}`].members.length < maxTeamSize) {\n            team.members[j].choice_num_awarded = k + 1;\n            student.choice_num_awarded = i + 1;\n\n            teams[`${team.members[j].choices[k]}`].members.push(team.members[j]);\n            team.members.splice(j, 1);\n            team.members.push(student);\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport const selectCombination = value => {\n  return {\n    type: SELECT_TEAM_COMBINATION,\n    payload: value\n  };\n};\n","import SetupPage from '../components/SetupPage';\nimport { connect } from 'react-redux';\nimport {\n  changeNumOfPreferredProjects,\n  assignProjToStudents,\n  changeProjectsArray,\n  changeStudentsArray,\n  removeStudent,\n  setMaxPossibleChoices,\n  setMaxTeamSize\n} from 'actions/setupPageActions.js';\n\nimport { selectCombination } from 'actions/teamBuilderPageActions';\nimport {\n  getNumOfPreferredProjects,\n  getMaxTeamSize,\n  getStudents,\n  getProjects,\n  getManuallyAssignedStudents,\n  getMaxPossibleChoices\n} from 'reducers';\n\nconst mapStateToProps = state => ({\n  numOfPrefProjects: getNumOfPreferredProjects(state),\n  students: getStudents(state),\n  projects: getProjects(state),\n  manuallyAssignedStudents: getManuallyAssignedStudents(state),\n  maxPossibleChoices: getMaxPossibleChoices(state),\n  maxTeamSize: getMaxTeamSize(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeNumOfPreferredProjects: value => dispatch(changeNumOfPreferredProjects(value)),\n  changeProjectsArray: value => dispatch(changeProjectsArray(value)),\n  changeStudentsArray: value => dispatch(changeStudentsArray(value)),\n  assignProjToStudents: value => dispatch(assignProjToStudents(value)),\n  removeStudent: value => dispatch(removeStudent(value)),\n  selectCombination: comboInformation => dispatch(selectCombination(comboInformation)),\n  setMaxPossibleChoices: value => dispatch(setMaxPossibleChoices(value)),\n  setMaxTeamSize: value => dispatch(setMaxTeamSize(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupPage);\n","import {\n  CHANGE_NUM_PROJECT_SLIDER,\n  CHANGE_PROJECTS_ARRAY,\n  CHANGE_STUDENTS_ARRAY,\n  ASSIGN_PROJ_TO_STUDENT,\n  REMOVE_STUDENT,\n  SET_MAX_POSSIBLE_CHOICES,\n  SET_MAX_TEAM_SIZE\n} from './actionTypes/setupPageActionTypes';\n\nexport const removeStudent = value => {\n  return {\n    type: REMOVE_STUDENT,\n    payload: value\n  };\n};\n\nexport const changeNumOfPreferredProjects = value => {\n  return {\n    type: CHANGE_NUM_PROJECT_SLIDER,\n    payload: value\n  };\n};\n\nexport const changeProjectsArray = value => {\n  return {\n    type: CHANGE_PROJECTS_ARRAY,\n    payload: value\n  };\n};\n\nexport const changeStudentsArray = value => {\n  return {\n    type: CHANGE_STUDENTS_ARRAY,\n    payload: value\n  };\n};\n\nexport const assignProjToStudents = value => {\n  return {\n    type: ASSIGN_PROJ_TO_STUDENT,\n    payload: value\n  };\n};\n\nexport const setMaxPossibleChoices = value => {\n  return {\n    type: SET_MAX_POSSIBLE_CHOICES,\n    payload: value\n  };\n};\n\nexport const setMaxTeamSize = value => {\n  return {\n    type: SET_MAX_TEAM_SIZE,\n    payload: value\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AttributeCheckboxes = ({ setChecked, checked }) => {\n  const categories = [\n    { value: 'avgScoreChoice', display_name: 'Project Preference' },\n    { value: 'avgScoreClass', display_name: 'Classification' },\n    { value: 'skillsMetRatio', display_name: 'Skill Match' }\n  ];\n\n  const handleToggle = c => () => {\n    const currentCategoryName = checked.indexOf(c);\n    const newCheckedCategory = [...checked];\n    if (currentCategoryName === -1) {\n      newCheckedCategory.push(c);\n    } else {\n      newCheckedCategory.splice(currentCategoryName, 1);\n    }\n    setChecked(newCheckedCategory);\n  };\n\n  return categories.map((c, i) => (\n    <div className='px-4 font-weight-bold attribute-checkboxes' key={i}>\n      <div className='checkbox' onClick={handleToggle(c.value)}>\n        <div className='checkbox-pos'>{checked.indexOf(c.value) === -1 ? null : checked.indexOf(c.value) + 1}</div>\n      </div>\n      {/* <input\n        type='checkbox'\n        className='form-check-input'\n        onChange={handleToggle(c.value)}\n        value={checked.indexOf(c.value === -1)}\n      /> */}\n      <label className='form-check-label ml-3'>{c.display_name}</label>\n    </div>\n  ));\n};\n\nAttributeCheckboxes.propTypes = {\n  setChecked: PropTypes.func,\n  checked: PropTypes.array\n};\n\nexport default AttributeCheckboxes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TeamComboRow({ combo, index, selectCombination, selectTeam }) {\n  const onSelectHandler = () => {\n    selectCombination(combo);\n    selectTeam({});\n  };\n\n  return (\n    <React.Fragment>\n      <td>\n        <div className='text-danger font-weight-bolder'>Combination {index + 1}</div>\n        <div>Avg Project Preference Choice: {combo.avgScoreChoice.toFixed(3)}</div>\n        <div>Classification Weight: {combo.avgScoreClass.toFixed(3)}</div>\n        <div>Percent of Skills Matched: {combo.skillsMetRatio.toFixed(3)}</div>\n        <div>Members Per Team Weight: {combo.coVarMembers.toFixed(3)}</div>\n        {/* <div>Unassigned Return:  {combo.unassignedReturn}</div>\n                                            <div>Unassigned Return:  {combo.unassignedReturn}</div> */}\n        <div>Unassigned Student(s): {combo.unassignedStudents.length}</div>\n      </td>\n      <td>\n        <button onClick={onSelectHandler} className='dark-gray text-center' style={{ width: '8rem' }}>\n          Select\n        </button>\n      </td>\n    </React.Fragment>\n  );\n}\n\nTeamComboRow.propTypes = {\n  combo: PropTypes.object,\n  index: PropTypes.number,\n  selectCombination: PropTypes.func,\n  selectTeam: PropTypes.func\n};\n\nexport default TeamComboRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Table, CardDeck, Spinner } from 'react-bootstrap';\nimport TeamComboRow from './TeamComboRow';\nimport { orderBy } from 'lodash';\n\n/* eslint-disable react/prop-types */\nfunction DisplayTeamCombinations({ teamCombos = [], selectCombo, regrenerateTeam, selectTeam, checked, loading }) {\n  function renderLoading() {\n    return (\n      <div style={{ height: '50vh' }} className='d-flex justify-content-center align-items-center'>\n        <Spinner animation='border' role='status' size='lg'></Spinner>\n      </div>\n    );\n  }\n\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>Total Combinations: {teamCombos.length} </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            {loading ? (\n              renderLoading()\n            ) : (\n              <Table striped bordered hover>\n                <tbody>\n                  {orderBy(\n                    teamCombos,\n                    [...checked, 'coVarMembers'],\n                    [...checked.map(attribute => (attribute === 'skillsMetRatio' ? 'desc' : 'asc')), 'asc']\n                  ).map((combo, index) => {\n                    return (\n                      <tr key={index}>\n                        <TeamComboRow\n                          selectCombination={selectCombo}\n                          selectTeam={selectTeam}\n                          combo={combo}\n                          index={index}\n                        />\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            )}\n          </Card>\n        </CardDeck>\n        <div className='text-info'>\n          Number of No Response Students: {teamCombos[0] ? teamCombos[0].noResponseStudents.length : null}\n        </div>\n        <div className='text-center' style={{ marginTop: '.5rem' }}>\n          <button onClick={regrenerateTeam} className='px-3 py-2 orange' style={{ borderRadius: '16px' }}>\n            Regenerate Teams\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n/* eslint-enable react/prop-types */\n\nDisplayTeamCombinations.propTypes = {\n  selectCombo: PropTypes.func,\n  selectTeam: PropTypes.func,\n  teamCombos: PropTypes.array,\n  regrenerateTeam: PropTypes.func,\n  checked: PropTypes.array\n};\n\nexport default DisplayTeamCombinations;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DisplayProjectRow({ combo, selectTeam, teamName }) {\n  const onSelectHandlerMembers = () => {\n    selectTeam(combo.teams[teamName]);\n  };\n\n  return (\n    <Fragment>\n      <td>\n        <div className={Object.keys(combo.teams[teamName].members).length < 3 ? 'text-danger' : null}>{teamName}</div>\n        <div className='text-danger small'>\n          {Object.keys(combo.teams[teamName].members).length < 3 ? '*Minimum team size not met' : null}\n        </div>\n      </td>\n      <td>\n        <button onClick={onSelectHandlerMembers} style={{ width: '8rem' }} className='dark-gray text-center'>\n          Select\n        </button>\n      </td>\n    </Fragment>\n  );\n}\n\nDisplayProjectRow.propTypes = {\n  combo: PropTypes.object,\n  selectTeam: PropTypes.func,\n  teamName: PropTypes.string\n};\n\nexport default DisplayProjectRow;\n","/* eslint-disable react/jsx-key */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport DisplayProjectRow from './DisplayProjectRow';\nimport { CSVLink } from 'react-csv';\n\nconst DisplayProjects = ({ combo = {}, selectTeam }) => {\n  let headers = [\n    { label: 'Team', key: 'Team' },\n    { label: 'Student', key: 'Student' },\n    { label: 'Choice 1', key: 'Choice 1' },\n    { label: 'Choice 2', key: 'Choice 2' },\n    { label: 'Choice 3', key: 'Choice 3' },\n    { label: 'Choice 4', key: 'Choice 4' },\n    { label: 'Choice 5', key: 'Choice 5' },\n    { label: 'Choice 6', key: 'Choice 6' },\n    { label: 'Student Major', key: 'Student Major' },\n    { label: 'Student Classification', key: 'Student Classification' },\n    { label: 'Gender', key: 'Gender' },\n    { label: 'Skill 1', key: 'Skill 1' },\n    { label: 'Skill 2', key: 'Skill 2' },\n    { label: 'Skill 3', key: 'Skill 3' }\n  ];\n\n  function getCSV() {\n    var newData = [];\n    if (combo.teams) {\n      let teams = combo.teams;\n\n      Object.keys(teams).forEach(teamName => {\n        let membersArr = teams[teamName].members;\n        if (membersArr && membersArr.length > 0) {\n          for (let i = 0; i < membersArr.length; i++) {\n            let rowData = {};\n            let member = membersArr[i];\n            rowData['Team'] = teamName;\n            if (member['id']) {\n              rowData['Student'] = member['name'].trim();\n              let choiceRows = member['choices'].map(s => {\n                return s.trim();\n              });\n              for (let j = 1; j <= choiceRows.length; j++) {\n                let strRow = 'Choice ' + j;\n                rowData[strRow] = choiceRows[j - 1];\n              }\n              rowData['Student Major'] = member['major'].trim();\n              rowData['Student Classification'] = member['classification'].trim();\n              rowData['Gender'] = member['gender'].trim();\n              let skillSet = member['skills'].map(s => s.trim());\n              for (let j = 1; j <= skillSet.length; j++) {\n                let skillRow = 'Skill ' + j;\n                rowData[skillRow] = skillSet[j - 1];\n              }\n            }\n            newData.push(rowData);\n          }\n        }\n      });\n    }\n    return newData;\n  }\n\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>\n        Total Projects: {combo.teams ? <span>{Object.keys(combo.teams).length}</span> : null}\n      </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <tbody>\n                {combo.teams\n                  ? Object.keys(combo.teams).map((teamName, index) => (\n                      <tr key={index}>\n                        <DisplayProjectRow combo={combo} selectTeam={selectTeam} teamName={teamName} />\n                      </tr>\n                    ))\n                  : null}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div className='text-center mt-3'>\n          <CSVLink data={getCSV()} headers={headers} className='px-3 py-2 orange'>\n            <button className='px-3 py-2 orange' style={{ borderRadius: '16px' }}>\n              Export\n            </button>\n          </CSVLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDisplayProjects.propTypes = {\n  selectTeam: PropTypes.func,\n  combo: PropTypes.object\n};\n// /*//npm install react-csv --save*/\nexport default DisplayProjects;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst DisplayTeamInformations = ({ team }) => {\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>\n        {/* <div> {team.project?  (<span>{team.project.name}</span>) :null}</div> */}\n        Total Members: {team.members ? <span>{team.members.length}</span> : null}\n      </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              {team.project ? (\n                <tbody>\n                  <tr className='team-classmate-row'>\n                    <td>\n                      <div className='text-danger font-weight-bolder'>Project Info: </div>\n                      <div>{team.project.name}</div>\n                      <div>Returning: {team.project.returning + ''}</div>\n                      <div>Skills: </div>\n                      <Col>\n                        {team.project.skills.map((skill, key) => (\n                          <div key={key}>\n                            {key + 1 + ': '}\n                            {skill}\n                          </div>\n                        ))}\n                      </Col>\n                    </td>\n                  </tr>\n\n                  {team.members.map((member, index) => (\n                    <tr className='team-classmate-row' key={index}>\n                      <td>\n                        {!index ? <div className='text-danger font-weight-bolder'>Student Info: </div> : null}\n                        <div>Name: {member.name}</div>\n                        <div>Id: {member.id}</div>\n                        <div>Major: {member.major}</div>\n                        <div>Year: {member.classification}</div>\n                        <div>Gender: {member.gender}</div>\n                        <div>Response: {'' + member.response}</div>\n                        <div>Choice: {member.choice_num_awarded}</div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              ) : null}\n            </Table>\n          </Card>\n        </CardDeck>\n      </div>\n    </div>\n  );\n};\n\nDisplayTeamInformations.propTypes = {\n  team: PropTypes.object\n};\n\nexport default DisplayTeamInformations;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst DisplayUnassignedStudents = ({ students }) => {\n  return (\n    <div className='pb-4'>\n    <div className='px-3 text-info'>\n      Total Unassigned Students: {students ? <span>{students.length}</span> : null}\n    </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              {students ? (\n                <tbody>\n                  {students.map((member, index) => (\n                    <tr className='team-classmate-row' key={index}>\n                      <td>\n                        {!index ? <div className='text-danger font-weight-bolder'>Student Info: </div> : null}\n                        <div>Name: {member.name}</div>\n                        <div>Id: {member.id}</div>\n                        <div>Major: {member.major}</div>\n                        <div>Year: {member.classification}</div>\n                        <div>Gender: {member.gender}</div>\n                        <div>Response: {'' + member.response}</div>\n                        <div>Choice: {member.choice_num_awarded}</div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              ) : null}\n            </Table>\n          </Card>\n        </CardDeck>\n      </div>\n    </div>\n  );\n};\n\nDisplayUnassignedStudents.propTypes = {\n  team: PropTypes.object\n};\n\nexport default DisplayUnassignedStudents;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from 'widgets/common/Header';\nimport AttributeCheckboxes from './AttributeCheckboxes';\nimport DisplayTeamCombinations from './TeamCombinationTable/DisplayTeamCombinations';\nimport { Row, Col } from 'react-bootstrap';\nimport DisplayProjects from './DisplayProjectsTable/DisplayProjects';\nimport DisplayTeamInformations from './DisplayTeamInformations';\nimport DisplayUnassignedStudents from './DisplayUnassignedStudents';\n//npm startimport * as FileSaver from 'file-saver';\n//import * as XLSX from 'xlsx';\n\nclass TeamBuilderPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      combo: {},\n      team: {},\n      checked: [],\n      showTooltip: false\n    };\n  }\n\n  componentDidMount() {\n    this.waitToGenerateTeams();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.teamCombos !== prevProps.teamCombos || prevState.checked !== this.state.checked) {\n      this.setState({ loading: false });\n    }\n  }\n\n  setCombo = combo => {\n    this.setState({ combo });\n  };\n\n  setTeam = team => {\n    this.setState({ team });\n  };\n\n  setChecked = checked => {\n    this.setState({ loading: true }, () => {\n      setTimeout(() => {\n        this.setState({ checked });\n      }, 100);\n    });\n  };\n\n  waitToGenerateTeams() {\n    //Let component fully render before dispatching\n    setTimeout(() => {\n      const { students, projects, manuallyAssignedStudents, numOfPrefProjects, generateTeams, maxTeamSize } = this.props;\n      generateTeams({ students, projects, manuallyAssignedStudents, numOfPrefProjects, maxTeamSize });\n    }, 100);\n  }\n\n  regrenerateTeam = () => {\n    this.setState({ loading: true, combo: {}, team: {} });\n    this.waitToGenerateTeams();\n  };\n\n  selectCombo = comboInformation => {\n    this.props.selectCombination(comboInformation);\n  };\n\n  exportBtn = () => {\n    alert('Does not work!!');\n  };\n\n  switchTooltipText = e => {\n    e.stopPropagation();\n    this.setState({ showTooltip: !this.state.showTooltip });\n  };\n\n  hideTooltipText = () => {\n    this.setState({ showTooltip: false });\n  };\n\n  renderTopSection = () => (\n    <div className='team-builder-header-options'>\n      <button onClick={this.props.switchToSetup} className='px-3 py-2 back-button green'>\n        Go Back\n      </button>\n      <div className='team-builder-attributes'>\n        <div className='font-weight-bolder py-2' style={{ display: 'inline-block' }}>\n          <h3 className='attribute-header'>Attribute Importance</h3>\n          <div className='attribute-tooltip' onClick={this.switchTooltipText}>\n            <div className='tooltip-question-mark'>?</div>\n            {!this.state.showTooltip ? null : (\n              <div className='tooltip-textbox'>\n                Numbers that appear in checkboxes displays the order in which the table is sorted by.\n                <br />\n                <b>Avg Project Preference Choice</b>: The average project choice a student is given.\n                <br />\n                <b>Classification Weight</b>: Considers spread of student classification per team. The closer to 0 the\n                better.\n                <br />\n                <b>Percent of Skills Matched</b>: The percentage of skills matched by the students in all the teams. (A\n                team skill is matched if at least one student on the team matches it)\n                <br />\n                <b>Members Per Team Weight</b>: Considers spread of students across teams. The closer to 0, the better.\n                Always sorted by this value since filling out teams is always the most important.\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='d-md-flex md-flex-row justify-content-center'>\n          <AttributeCheckboxes setChecked={this.setChecked} checked={this.state.checked} />\n        </div>\n      </div>\n    </div>\n  );\n\n  renderTeamCombinations = () => {\n    const { teamCombos } = this.props;\n    return (\n      <div className='team-combo-view'>\n        <div className='font-weight-bolder text-center'>\n          <h4>Team Combinations</h4>\n        </div>\n        <DisplayTeamCombinations\n          teamCombos={teamCombos}\n          selectCombination={this.selectCombo}\n          selectCombo={this.setCombo}\n          selectTeam={this.setTeam}\n          regrenerateTeam={this.regrenerateTeam}\n          checked={this.state.checked}\n          loading={this.state.loading}\n        />\n      </div>\n    );\n  };\n\n  renderViewProjects = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center '>\n        <h4>View Projects</h4>\n      </div>\n      <DisplayProjects combo={this.state.combo} selectTeam={this.setTeam} exportBtn={this.exportBtn} />\n    </div>\n  );\n\n  renderUnassignedStudents = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center '>\n        <h4>Unassigned Students</h4>\n      </div>\n      <DisplayUnassignedStudents students={this.state.combo.unassignedStudents} />\n    </div>\n  );\n\n  renderTeamInformations = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center'>\n        <h4>Team Informations</h4>\n      </div>\n      <DisplayTeamInformations team={this.state.team} />\n    </div>\n  );\n\n  render() {\n    return (\n      <div className='team-builder-page' onClick={this.hideTooltipText}>\n        <Header />\n        {this.renderTopSection()}\n        <Row>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderTeamCombinations()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderUnassignedStudents()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderViewProjects()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderTeamInformations()}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nTeamBuilderPage.propTypes = {\n  numOfPrefProjects: PropTypes.number,\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  switchToSetup: PropTypes.func,\n  manuallyAssignedStudents: PropTypes.object,\n  teamCombos: PropTypes.array,\n  generateTeams: PropTypes.func,\n  selectCombination: PropTypes.func,\n  selectProjects: PropTypes.func,\n  selectMembers: PropTypes.func\n};\n\nexport default TeamBuilderPage;\n","import TeamBuilderPage from 'widgets/TeamBuilderPage/components/TeamBuilderPage';\nimport { connect } from 'react-redux';\nimport { generateTeams, selectCombination } from 'actions/teamBuilderPageActions';\nimport {\n  getNumOfPreferredProjects,\n  getStudents,\n  getProjects,\n  getManuallyAssignedStudents,\n  getMaxTeamSize,\n  getTeamCombos\n} from 'reducers';\n\nconst mapStateToProps = state => ({\n  numOfPrefProjects: getNumOfPreferredProjects(state),\n  students: getStudents(state),\n  projects: getProjects(state),\n  manuallyAssignedStudents: getManuallyAssignedStudents(state),\n  teamCombos: getTeamCombos(state),\n  maxTeamSize: getMaxTeamSize(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  generateTeams: teamInformation => dispatch(generateTeams(teamInformation)),\n  selectCombination: comboInformation => dispatch(selectCombination(comboInformation))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamBuilderPage);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport SetupPage from 'widgets/SetupPage/containers/SetupPageContainer';\nimport TeamBuilderPage from 'widgets/TeamBuilderPage/containers/TeamBuilderPageContainer';\n\nexport default class EpicsTeamBuilder extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showSetupPage: true\n    };\n  }\n\n  switchToTeamBuilder = () => {\n    this.setState({ showSetupPage: false });\n  };\n\n  switchToSetup = () => {\n    this.setState({ showSetupPage: true });\n  };\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className='epics-team-builder'>\n          <div className='gray-background' />\n          {this.state.showSetupPage ? (\n            <SetupPage switchToTeamBuilder={this.switchToTeamBuilder} />\n          ) : (\n            <TeamBuilderPage switchToSetup={this.switchToSetup} />\n          )}\n        </div>\n      </Provider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport '../node_modules/nouislider/distribute/nouislider.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport EpicsTeamBuilder from './EpicsTeamBuilder';\n\nReactDOM.render(<EpicsTeamBuilder />, document.getElementById('root'));\n"],"sourceRoot":""}