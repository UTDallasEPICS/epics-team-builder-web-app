{"version":3,"sources":["widgets/common/Epics.png","reducers/setupPageReducer.js","actions/actionTypes/setupPageActionTypes.js","reducers/teamBuilderPageReducer.js","actions/actionTypes/teamBuilderActionTypes.js","reducers/index.js","store.js","widgets/common/Header.jsx","widgets/SetupPage/components/ManuallyAssignedStudents.jsx","widgets/SetupPage/components/ManuallyAssignProjects.jsx","widgets/SetupPage/components/ExcelReader.jsx","widgets/SetupPage/components/TeamSettings.jsx","widgets/SetupPage/components/SetupPage.jsx","actions/teamBuilderPageActions.js","widgets/SetupPage/containers/SetupPageContainer.jsx","actions/setupPageActions.js","widgets/TeamBuilderPage/components/AttributeCheckboxes.jsx","widgets/TeamBuilderPage/components/TeamCombinationTable/TeamComboRow.js","widgets/TeamBuilderPage/components/TeamCombinationTable/DisplayTeamCombinations.jsx","widgets/TeamBuilderPage/components/DisplayProjectsTable/DisplayProjectRow.js","widgets/TeamBuilderPage/components/DisplayProjectsTable/DisplayProjects.jsx","widgets/TeamBuilderPage/components/DisplayTeamInformations.jsx","widgets/TeamBuilderPage/components/DisplayUnassignedStudents.jsx","widgets/TeamBuilderPage/components/TeamBuilderPage.jsx","widgets/TeamBuilderPage/containers/TeamBuilderPageContainer.jsx","EpicsTeamBuilder.jsx","index.js"],"names":["module","exports","combineReducers","students","state","type","payload","projects","manuallyAssignedStudents","numOfPreferredProjects","maxChoicesConsidered","maxTeamSize","getSelectedCombo","getTeamCombos","setupPage","setupPageReducer","teamCombos","teamBuilderPageReducer","getStudents","getProjects","getManuallyAssignedStudents","getNumOfPreferredProjects","getMaxPossibleChoices","getMaxTeamSize","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","Header","React","Component","render","className","src","require","alt","MAS","onClickHandler","index","document","getElementById","checked","delete","SL","OS","copy","Object","assign","inputElements","getElementsByClassName","i","value","id","this","props","removeStudent","mapStudents","studentsAssigned","temp","key","keys","push","studentLink","CardDeck","Card","border","Table","striped","bordered","hover","style","width","map","listValue","data-item","onClick","bind","textAlign","name","display","justifyContent","ManuallyAssignProjects","addProjectToStudent","projectByStudentId","projectName","project","length","currStudentID","assignProjToStudents","onProjectClickHandler","forEach","onStudentClickHandler","defaultChecked","student","parseInt","ExcelReader","constructor","super","getExtension","fileName","split","onProjectInputClick","projectInputRef","current","click","onStudentInputClick","studentInputRef","onProjectDrop","files","event","target","handleChangeProjects","onStudentDrop","handleChangeStudents","projectFileName","studentFileName","createRef","projectBtnRef","studentBtnRef","numProjects","e","alert","setState","handleProjectFile","blur","handleStudentFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","data","utils","sheet_to_json","tempContainer","actualColNames","columnCount","decode_range","c","encode_col","v","error","reduce","accumalator","includes","slice","projectsArray","skillsArray","trim","returning","skills","changeProjectsArray","readAsArrayBuffer","changeStudentsArray","setMaxPossibleChoices","changeNumOfPreferredProjects","setMaxTeamSize","choiceArray","incorrectStudents","studentsArray","studentMajor","substring","indexOf","studentSkillsArray","studentChoices","choice","borked","filter","s","console","log","join","some","response","choices","major","classification","gender","found_team","choice_num_awarded","Math","ceil","onDrop","getRootProps","getInputProps","isDragActive","disabled","ref","accept","onChange","TeamSettings","a","Number","SetupPage","numOfPrefProjects","maxPossibleChoices","switchToTeamBuilder","defaultProps","findTeamForStudent","teams","team","j","members","assigned","k","splice","selectCombination","connect","dispatch","comboInformation","AttributeCheckboxes","setChecked","handleToggle","currentCategoryName","newCheckedCategory","display_name","TeamComboRow","combo","selectTeam","Fragment","avgScoreChoice","toFixed","avgScoreClass","skillsMetRatio","coVarMembers","unassignedStudents","DisplayTeamCombinations","selectCombo","regrenerateTeam","loading","height","Spinner","animation","role","size","orderBy","attribute","noResponseStudents","marginTop","borderRadius","DisplayProjectRow","teamName","DisplayProjects","newData","membersArr","rowData","member","choiceRows","skillSet","getCSV","headers","label","DisplayTeamInformations","Col","skill","DisplayUnassignedStudents","TeamBuilderPage","setCombo","setTeam","setTimeout","waitToGenerateTeams","exportBtn","switchTooltipText","stopPropagation","showTooltip","hideTooltipText","renderTopSection","switchToSetup","renderTeamCombinations","renderViewProjects","renderUnassignedStudents","renderTeamInformations","componentDidMount","componentDidUpdate","prevProps","prevState","generateTeams","Row","xs","md","teamInformation","tempStudents","JSON","parse","stringify","sid","wrongNames","randomStudents","newTeams","floor","random","smallTeams","largeTeams","unassignedReturn","unassignedNormal","teamAverageChoice","teamAverageClass","totalWeighedTeams","teamTotalClass","teamTotalChoice","teamMembers","abs","skillsMet","avgSkillsMet","exp","staDevSkillsMet","sqrt","skillsMetWeight","totalMembers","avgMembersPerTeam","Set","EpicsTeamBuilder","showSetupPage","ReactDOM"],"mappings":"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","file":"static/js/main.9ae4d921.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Epics.183416a8.png\";","import { combineReducers } from 'redux';\nimport {\n  CHANGE_NUM_PROJECT_SLIDER,\n  CHANGE_STUDENTS_ARRAY,\n  CHANGE_PROJECTS_ARRAY,\n  ASSIGN_PROJ_TO_STUDENT,\n  REMOVE_STUDENT,\n  SET_MAX_POSSIBLE_CHOICES,\n  SET_MAX_TEAM_SIZE\n} from 'actions/actionTypes/setupPageActionTypes';\n\nconst students = (state = [], { type, payload }) => {\n  switch (type) {\n    case CHANGE_STUDENTS_ARRAY:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst projects = (state = [], { type, payload }) => {\n  switch (type) {\n    case CHANGE_PROJECTS_ARRAY:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst manuallyAssignedStudents = (state = {}, { type, payload }) => {\n  switch (type) {\n    case REMOVE_STUDENT:\n      return payload;\n    case ASSIGN_PROJ_TO_STUDENT:\n      return {\n        ...state,\n        ...payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst numOfPreferredProjects = (state = 6, { type, payload }) => {\n  switch (type) {\n    case CHANGE_NUM_PROJECT_SLIDER:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst maxChoicesConsidered = (state = 0, { type, payload }) => {\n  switch (type) {\n    case SET_MAX_POSSIBLE_CHOICES:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nconst maxTeamSize = (state = 5, { type, payload }) => {\n  switch (type) {\n    case SET_MAX_TEAM_SIZE:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  students,\n  projects,\n  manuallyAssignedStudents,\n  numOfPreferredProjects,\n  maxChoicesConsidered,\n  maxTeamSize\n});\n","//Slider types\nexport const CHANGE_NUM_PROJECT_SLIDER = 'CHANGE_NUM_PROJECT_SLIDER';\nexport const CHANGE_PROJECTS_ARRAY = 'CHANGE_PROJECTS_ARRAY';\nexport const CHANGE_STUDENTS_ARRAY = 'CHANGE_STUDENT_ARRAY';\nexport const ASSIGN_PROJ_TO_STUDENT = 'ASSIGN_PROJ_TO_STUDENT';\nexport const REMOVE_STUDENT = 'REMOVE_STUDENT';\nexport const SET_MAX_POSSIBLE_CHOICES = 'SET_MAX_POSSIBLE_CHOICES';\nexport const SET_MAX_TEAM_SIZE = 'SET_MAX_TEAM_SIZE';\n","import { combineReducers } from 'redux';\nimport { INITIATE_TEAM_GENERATION } from '../actions/actionTypes/teamBuilderActionTypes';\nimport { SELECT_TEAM_COMBINATION } from '../actions/actionTypes/teamBuilderActionTypes';\n\nconst getTeamCombos = (state = [], { type, payload }) => {\n  switch (type) {\n    case INITIATE_TEAM_GENERATION:\n      return payload;\n    default:\n      return state;\n  }\n};\nconst getSelectedCombo = (state = {}, { type, payload }) => {\n  switch (type) {\n    case SELECT_TEAM_COMBINATION:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  getSelectedCombo,\n  getTeamCombos\n});\n","export const INITIATE_TEAM_GENERATION = 'INITIATE_TEAM_GENERATION';\nexport const SELECT_TEAM_COMBINATION = 'SELECT_TEAM_COMBINATION';\n","import { combineReducers } from 'redux';\nimport setupPageReducer from './setupPageReducer';\nimport teamBuilderPageReducer from './teamBuilderPageReducer';\n\nexport default combineReducers({\n  setupPage: setupPageReducer,\n  teamCombos: teamBuilderPageReducer\n});\n\n//Setup Page Selectors\nexport const getStudents = state => state.setupPage.students;\nexport const getProjects = state => state.setupPage.projects;\nexport const getManuallyAssignedStudents = state => state.setupPage.manuallyAssignedStudents;\nexport const getNumOfPreferredProjects = state => state.setupPage.numOfPreferredProjects;\nexport const getMaxPossibleChoices = state => state.setupPage.maxChoicesConsidered;\nexport const getMaxTeamSize = state => state.setupPage.maxTeamSize;\n\n//Team Builder Page Selectors\nexport const getTeamCombos = state => state.teamCombos.getTeamCombos;\nexport const getSelectedCombo = state => state.teamCombos.getSelectedCombo;\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nconst initialState = {};\n\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n\n  initialState,\n  composeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <div className='header-container'>\n        <div className='header'>\n          <img src={require('./Epics.png')} alt={\"EPIC's Logo\"} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default class MAS extends React.Component {\n  delete(SL, OS) {\n    var copy = Object.assign({}, OS);\n    var inputElements = document.getElementsByClassName('messageCheckbox');\n    for (var i = 0; inputElements[i]; ++i) {\n      if (inputElements[i].checked) {\n        delete copy[SL[inputElements[i].value].id];\n        inputElements[i].checked = false;\n      }\n    }\n    this.props.removeStudent(copy);\n  }\n\n  onClickHandler = index => {\n    if (document.getElementById('checkbox' + index).checked === true) {\n      document.getElementById('checkbox' + index).checked = false;\n    } else {\n      document.getElementById('checkbox' + index).checked = true;\n    }\n  };\n\n  mapStudents(students, studentsAssigned) {\n    var temp = [];\n    for (var key of Object.keys(students)) {\n      if (students[key].id in studentsAssigned) {\n        temp.push(students[key]);\n      }\n    }\n    return temp;\n  }\n  render() {\n    let { manuallyAssignedStudents, students } = this.props;\n    let studentLink = this.mapStudents(students, manuallyAssignedStudents);\n    return (\n      <div className='manual-project-assignment'>\n        <label className='title'>Manually Assigned Students</label>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '8%' }}></th>\n                  <th style={{ width: '20%' }}>Name</th>\n                  <th style={{ width: '20%' }}>NetID</th>\n                  <th style={{ width: '42%' }}>Project Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {studentLink.map((listValue, index) => {\n                  return (\n                    <tr key={index} data-item={listValue} onClick={this.onClickHandler.bind(this, index)}>\n                      <td style={{ textAlign: 'center' }}>\n                        <input\n                          id={'checkbox' + index}\n                          className='messageCheckbox'\n                          type='checkbox'\n                          name='box'\n                          value={index}\n                          onClick={this.onClickHandler.bind(this, index)}\n                        ></input>\n                      </td>\n                      <td>{listValue.name}</td>\n                      <td>{listValue.id}</td>\n                      <td>{manuallyAssignedStudents[listValue.id]}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button\n            className='red'\n            type='submit'\n            style={{ width: '140px' }}\n            onClick={() => this.delete(studentLink, manuallyAssignedStudents)}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nMAS.propTypes = {\n  students: PropTypes.array,\n  manuallyAssignedStudents: PropTypes.object,\n  changeStudentsArray: PropTypes.func,\n  removeStudent: PropTypes.func\n};\n","import React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nexport default class ManuallyAssignProjects extends React.Component {\n  addProjectToStudent = () => {\n    const { projects, students } = this.props;\n    let projectByStudentId = {};\n\n    //Get name of selected project\n    let projectName = null;\n    for (let project of projects) {\n      if (document.getElementById(project.name).checked) {\n        projectName = project.name;\n        break;\n      }\n    }\n\n    //Exit function if no projects were selected\n    if (!projectName) {\n      return;\n    }\n    document.getElementById(projectName).checked = false;\n\n    //Map checked students to checked project\n    for (var i = 0; i < students.length; i++) {\n      var currStudentID = students[i]['id'];\n\n      if (document.getElementById(currStudentID) && document.getElementById(currStudentID).checked) {\n        document.getElementById(currStudentID).checked = false;\n        projectByStudentId[currStudentID] = projectName;\n      }\n    }\n    this.props.assignProjToStudents(projectByStudentId);\n  };\n\n  //Handle clicks on table row to effect associated checkbox\n  onProjectClickHandler = name => {\n    this.props.projects.forEach(project => {\n      if (project.name !== name) {\n        document.getElementById(project.name).checked = false;\n      }\n    });\n    document.getElementById(name).checked = !document.getElementById(name).checked;\n  };\n\n  onStudentClickHandler = id => {\n    document.getElementById(id).checked = !document.getElementById(id).checked;\n  };\n\n  render() {\n    const { students, projects, manuallyAssignedStudents } = this.props;\n    return (\n      <div className='manual-project-assignment'>\n        <label className='title'>Manual Project Assignment</label>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '15%' }}></th>\n                  <th>Project Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                {projects.map((project, index) => {\n                  return (\n                    <tr key={index} onClick={this.onProjectClickHandler.bind(this, project.name)}>\n                      <td>\n                        <input\n                          type='radio'\n                          onClick={this.onProjectClickHandler.bind(this, project.name)}\n                          defaultChecked={false}\n                          id={project.name}\n                        />\n                      </td>\n                      <td>{project.name}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th style={{ width: '15%' }}></th>\n                  <th>Name</th>\n                  <th>NetID</th>\n                </tr>\n              </thead>\n              <tbody>\n                {students.map((student, index) => {\n                  //If student has already been assigned, don't show them on table\n                  for (let id in manuallyAssignedStudents) {\n                    if (parseInt(id) === student.id) {\n                      return null;\n                    }\n                  }\n                  return (\n                    <tr key={index} onClick={this.onStudentClickHandler.bind(this, student.id)}>\n                      <td>\n                        <input\n                          type='checkbox'\n                          className='studentBox'\n                          defaultChecked={false}\n                          id={student.id}\n                          onClick={this.onStudentClickHandler.bind(this, student.id)}\n                        />\n                      </td>\n                      <td>{student.name}</td>\n                      <td>{student.id}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n          <button className='green' style={{ width: '140px' }} onClick={this.addProjectToStudent}>\n            Add\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nManuallyAssignProjects.propTypes = {\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  manuallyAssignedStudents: PropTypes.object,\n  assignProjToStudents: PropTypes.func\n};\n","import React, { Component } from 'react';\nimport XLSX from 'xlsx';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projectFileName: 'Or drag file here',\n      studentFileName: 'Or drag file here'\n    };\n\n    this.projectInputRef = React.createRef();\n    this.studentInputRef = React.createRef();\n    this.projectBtnRef = React.createRef();\n    this.studentBtnRef = React.createRef();\n    this.handleChangeProjects = this.handleChangeProjects.bind(this);\n    this.handleChangeStudents = this.handleChangeStudents.bind(this);\n    this.numProjects = 0;\n  }\n\n  getExtension = fileName => {\n    let temp = fileName.split('.');\n    return temp[temp.length - 1];\n  };\n\n  handleChangeProjects(e) {\n    const files = e.target.files;\n    if (files && files[0]) {\n      if (this.getExtension(files[0].name) !== 'xlsx') {\n        //Remove file from input component\n        e.target.value = '';\n        return alert('File must be of type xlsx');\n      }\n      this.setState({ projectFileName: files[0].name });\n      this.handleProjectFile(files[0]);\n    }\n    this.projectBtnRef.current.blur();\n  }\n\n  handleChangeStudents(e) {\n    const files = e.target.files;\n    if (files && files[0]) {\n      if (this.getExtension(files[0].name) !== 'xlsx') {\n        //Remove file from input component\n        e.target.value = '';\n        return alert('File must be of type xlsx');\n      }\n      this.setState({ studentFileName: files[0].name });\n      this.handleStudentFile(files[0]);\n    }\n    this.studentBtnRef.current.blur();\n  }\n\n  handleProjectFile(file) {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n\n      let tempContainer = {\n        file: file,\n        data\n      };\n\n      //Check for correct columns in project file\n      let expectedColNames = ['Skill 1', 'Skill 2', 'Skill 3', 'Returning (Y/N)', 'Project Name'];\n\n      let actualColNames = [];\n      const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;\n      for (let i = 0; i < columnCount; ++i) {\n        actualColNames[i] = ws[`${XLSX.utils.encode_col(i)}1`].v;\n      }\n\n      let error = expectedColNames.reduce((accumalator, name) => {\n        if (!actualColNames.includes(name)) {\n          accumalator += ' ' + name + ',';\n        }\n        return accumalator;\n      }, 'Missing columns:');\n\n      if (error.length > 16) {\n        this.setState({ projectFileName: 'Or drag file here' });\n        return alert(error.slice(0, -1));\n      }\n\n      //Reduce file object down to new object with formatted data\n      let projectsArray = tempContainer.data.reduce((accumalator, project) => {\n        let skillsArray = [project['Skill 1'], project['Skill 2'], project['Skill 3']];\n\n        accumalator.push({\n          name: project['Project Name'] ? project['Project Name'].trim() : 'N/A',\n          returning: project['Returning (Y/N)'] === 'Y',\n          skills: skillsArray[0] ? skillsArray : []\n        });\n        return accumalator;\n      }, []);\n      this.props.changeProjectsArray(projectsArray);\n      this.numProjects = projectsArray.length\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  handleStudentFile(file) {\n    const { changeStudentsArray, setMaxPossibleChoices, changeNumOfPreferredProjects, setMaxTeamSize } = this.props;\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n\n      let tempContainer = {\n        file: file,\n        data\n      };\n\n      //                  Check for correct columns in student file\n      let expectedColNames = [\n        'Student',\n        'Response Date',\n        'SSO ID',\n        'Course',\n        'Student Major',\n        'Student Classification',\n        'Gender',\n        'Skill 1',\n        'Skill 2',\n        'Skill 3'\n      ];\n\n      let actualColNames = [];\n      const choiceArray = []\n      const columnCount = XLSX.utils.decode_range(ws['!ref']).e.c + 1;\n      for (let i = 0; i < columnCount; ++i) {\n        actualColNames[i] = ws[`${XLSX.utils.encode_col(i)}1`].v;\n        if (actualColNames[i].includes(\"Choice\")) choiceArray.push(actualColNames[i])\n      }\n      setMaxPossibleChoices(choiceArray.length)\n      changeNumOfPreferredProjects(choiceArray.length)\n\n      let error = expectedColNames.reduce((accumalator, name) => {\n        if (!actualColNames.includes(name)) {\n          accumalator += ' ' + name + ',';\n        }\n        return accumalator;\n      }, 'Missing columns:');\n\n      if (error.length > 16) {\n        this.setState({ studentFileName: 'Or drag file here' });\n        return alert(error.slice(0, -1));\n      }\n      const incorrectStudents = []\n      //Reduce file object down to new object with formatted data\n      let studentsArray = tempContainer.data.reduce((accumalator, student) => {\n        if (student['Student Major']) {\n          var studentMajor = student['Student Major'].substring(\n            student['Student Major'].indexOf('::::') + 4,\n            student['Student Major'].length\n          );\n        }\n\n        let studentSkillsArray = [student['Skill 1'], student['Skill 2'], student['Skill 3']];\n\n        let studentChoices = choiceArray.map(choice => student[choice]?.trim())\n        const borked = studentChoices.filter(s => !choiceArray.includes(s))\n        if (borked.length) {\n          console.log(`Borked Choices for ${student[\"Student\"]}: ${borked.join(', ')}`)\n          return accumalator\n        }\n        if(studentChoices.some(c => !c) || studentSkillsArray.some(c => !c)) {\n          incorrectStudents.push(student[\"Student\"]) \n        }\n        else {\n          accumalator.push({\n            name: student['Student'] ? student['Student'] : 'N/A',\n            response: student['Response Date'] ? true : false,\n            id: student['SSO ID'] ? student['SSO ID'] : 'N/A',\n            returning: student['Course'] === 'EPCS 3200',\n            choices: studentChoices,\n            major: studentMajor,\n            classification: student['Student Classification'] ? student['Student Classification'] : 'N/A',\n            gender: student['Gender'] ? student['Gender'] : 'N/A',\n            skills: studentSkillsArray[0] ? studentSkillsArray : [],\n            found_team: false,\n            choice_num_awarded: 0\n          });\n        }\n\n        return accumalator;\n      }, []);\n      if (incorrectStudents.length) alert(`The following students have not filled out one or more skills/choices: \\n ${incorrectStudents.join(\"\\n\")}`)\n      changeStudentsArray(studentsArray);\n      setMaxTeamSize(Math.ceil(studentsArray.length/this.numProjects))\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  onProjectInputClick = () => {\n    this.projectInputRef.current.click();\n  };\n\n  onStudentInputClick = () => {\n    this.studentInputRef.current.click();\n  };\n\n  //Setup file drops like a normal file input event\n  onProjectDrop = files => {\n    const event = { target: { files } };\n    this.handleChangeProjects(event);\n  };\n\n  onStudentDrop = files => {\n    const event = { target: { files } };\n    this.handleChangeStudents(event);\n  };\n\n  render() {\n    const { projectFileName, studentFileName } = this.state;\n\n    return (\n      <div className='file-uploader'>\n        <Dropzone onDrop={this.onProjectDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <div {...getRootProps()} className={isDragActive ? 'drag-box' : ''}>\n              <input {...getInputProps()} disabled={true} />\n              <div className='upload-project'>\n                <button className='orange' onClick={this.onProjectInputClick} ref={this.projectBtnRef}>\n                  Upload Project Files\n                </button>\n                <input\n                  id='projectInput'\n                  type='file'\n                  accept='.xlsx'\n                  style={{ display: 'none' }}\n                  ref={this.projectInputRef}\n                  onChange={this.handleChangeProjects}\n                />\n                <label className='file-name-display'>{projectFileName}</label>\n              </div>\n            </div>\n          )}\n        </Dropzone>\n        <Dropzone onDrop={this.onStudentDrop}>\n          {({ getRootProps, getInputProps, isDragActive }) => (\n            <div {...getRootProps()} className={isDragActive ? 'drag-box' : ''}>\n              <input {...getInputProps()} disabled={true} />\n              <div className='upload-students'>\n                <button className='orange' onClick={this.onStudentInputClick} ref={this.studentBtnRef}>\n                  Upload Student Files\n                </button>\n                <input\n                  id='studentInput'\n                  type='file'\n                  accept='.xlsx'\n                  style={{ display: 'none' }}\n                  ref={this.studentInputRef}\n                  onChange={this.handleChangeStudents}\n                />\n                <label className='file-name-display'>{studentFileName}</label>\n              </div>\n            </div>\n          )}\n        </Dropzone>\n      </div>\n    );\n  }\n}\n\nExcelReader.propTypes = {\n  changeProjectsArray: PropTypes.func,\n  changeStudentsArray: PropTypes.func,\n  setMaxPossibleChoices: PropTypes.func,\n  maxPossibleChoices: PropTypes.number,\n  setMaxTeamSize: PropTypes.func\n};\nexport default ExcelReader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TeamSettings({ maxTeamSize, setMaxTeamSize }) {\n\n  const updateTeamSize = (a) => {\n    setMaxTeamSize(Number(a.target.value))\n  }\n\n  return (\n    <div className='preferred-project-slider'>\n      <div className='auto-checkbox-container'>\n        <div className=\"team-size-input\">\n          <p>Max Team Size: </p>\n          <input type=\"number\" value={maxTeamSize} onChange={updateTeamSize}></input>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nTeamSettings.propTypes = {\n  numOfPrefProjects: PropTypes.number,\n  maxPossibleChoices: PropTypes.number,\n  changeNumOfPreferredProjects: PropTypes.func,\n  maxTeamSize: PropTypes.number,\n  setMaxTeamSize: PropTypes.func\n};\nexport default TeamSettings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from 'widgets/common/Header';\nimport MAS from './ManuallyAssignedStudents';\nimport ManuallyAssignProjects from './ManuallyAssignProjects';\nimport ExcelReader from './ExcelReader';\nimport TeamSettings from './TeamSettings';\n\nclass SetupPage extends React.Component {\n  render() {\n    const {\n      numOfPrefProjects,\n      students,\n      projects,\n      assignProjToStudents,\n      changeStudentsArray,\n      changeProjectsArray,\n      manuallyAssignedStudents,\n      removeStudent,\n      setMaxPossibleChoices,\n      setMaxTeamSize,\n      maxTeamSize,\n      maxPossibleChoices,\n      changeNumOfPreferredProjects,\n      switchToTeamBuilder\n    } = this.props;\n\n    return (\n      <div className='setup-page'>\n        <Header />\n        <div className='setup-grid'>\n          <ExcelReader\n            changeStudentsArray={changeStudentsArray}\n            changeProjectsArray={changeProjectsArray}\n            setMaxPossibleChoices={setMaxPossibleChoices}\n            maxPossibleChoices={maxPossibleChoices}\n            changeNumOfPreferredProjects={changeNumOfPreferredProjects}\n            setMaxTeamSize={setMaxTeamSize}\n          />\n\n          <ManuallyAssignProjects\n            students={students}\n            projects={projects}\n            assignProjToStudents={assignProjToStudents}\n            changeStudentsArray={changeStudentsArray}\n            manuallyAssignedStudents={manuallyAssignedStudents}\n          />\n          <div className='manually-assigned-students'>\n            <MAS\n              students={students}\n              manuallyAssignedStudents={manuallyAssignedStudents}\n              removeStudent={removeStudent}\n            />\n          </div>\n        </div>\n        <TeamSettings\n          numOfPrefProjects={numOfPrefProjects}\n          maxPossibleChoices={maxPossibleChoices}\n          changeNumOfPreferredProjects={changeNumOfPreferredProjects}\n          maxTeamSize={maxTeamSize}\n          setMaxTeamSize={setMaxTeamSize}\n        /> \n        <button\n          className='orange generate-teams-btn'\n          onClick={switchToTeamBuilder}\n          disabled={students.length === 0 || projects.length === 0}\n        >\n          Build Teams\n        </button>\n      </div>\n    );\n  }\n}\n\nSetupPage.defaultProps = {\n  numOfPrefProjects: 6,\n  students: [],\n  projects: [],\n  manuallyAssignedStudents: {}\n};\n\nSetupPage.propTypes = {\n  changeNumOfPreferredProjects: PropTypes.func,\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  assignProjToStudents: PropTypes.func,\n  changeProjectsArray: PropTypes.func,\n  changeStudentsArray: PropTypes.func,\n  switchToTeamBuilder: PropTypes.func,\n  setMaxPossibleChoices: PropTypes.func,\n  manuallyAssignedStudents: PropTypes.object,\n  generateTeams: PropTypes.func,\n  removeStudent: PropTypes.func,\n  numOfPrefProjects: PropTypes.number,\n  maxPossibleChoices: PropTypes.number\n};\n\nexport default SetupPage;\n","import { INITIATE_TEAM_GENERATION } from './actionTypes/teamBuilderActionTypes';\nimport { SELECT_TEAM_COMBINATION } from './actionTypes/teamBuilderActionTypes';\n\nexport const generateTeams = ({ projects, students, manuallyAssignedStudents, numOfPrefProjects, maxTeamSize }) => {\n  const teams = {};\n  let tempStudents = JSON.parse(JSON.stringify(students));\n  projects.forEach(project => {\n    teams[`${project.name}`] = {\n      project,\n      members: [],\n      value: 0\n    };\n  });\n\n  //First assign manually assigned students\n  for (let sid in manuallyAssignedStudents) {\n    //Change students to map from sid to their info\n    for (let i = 0; i < tempStudents.length; i++) {\n      if (parseInt(tempStudents[i].id) === parseInt(sid)) {\n        tempStudents[i].assigned = true;\n        teams[manuallyAssignedStudents[sid]].members.push(tempStudents[i]);\n        tempStudents.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  //Pull out all students who did not respond\n  let noResponseStudents = tempStudents.filter(student => !student.response);\n  tempStudents = tempStudents.filter(student => student.response);\n\n  //Let returning students get priority in project choice first\n  for (let i = 0; i < tempStudents.length; i++) {\n    if (tempStudents[i].returning) {\n      for (let j = 0; j < tempStudents[i].choices.length; j++) {\n        if (!teams[`${tempStudents[i]?.choices[j]}`]) {\n          console.error(`${tempStudents[i]}, ${tempStudents[i]?.choices[j]} does not exist in teams list`)\n          continue\n        }\n        if (teams[`${tempStudents[i].choices[j]}`].members.length < maxTeamSize) {\n          tempStudents[i].choice_num_awarded = j + 1;\n          teams[`${tempStudents[i].choices[j]}`].members.push(tempStudents[i]);\n          tempStudents.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  let teamCombos = [];\n  let wrongNames = []\n  //Loop through creation of teams\n  for (let i = 0; i < 100; i++) {\n    //Make copies to start off on\n    let randomStudents = JSON.parse(JSON.stringify(tempStudents));\n    let newTeams = JSON.parse(JSON.stringify(teams));\n    //Shuffle students to hopefully get different results\n    for (var k = randomStudents.length - 1; k > 0; k--) {\n      var j = Math.floor(Math.random() * (k + 1));\n      let temp = randomStudents[k];\n      randomStudents[k] = randomStudents[j];\n      randomStudents[j] = temp;\n    }\n    //Place normal students in their top choices if possible\n    for (let j = randomStudents.length - 1; j >= 0; j--) {\n      for (let k = 0; k < numOfPrefProjects; k++) {\n        if (randomStudents[j].choices[k]) {\n          if (!newTeams[`${randomStudents[j].choices[k]}`]) {\n            wrongNames.push(`${randomStudents[j].name}, choice ${k+1}`)\n          } else if (newTeams[`${randomStudents[j].choices[k]}`].members.length < 3) {\n            randomStudents[j].choice_num_awarded = k + 1;\n            newTeams[`${randomStudents[j].choices[k]}`].members.push(randomStudents[j]);\n            randomStudents.splice(j, 1);\n            break;\n          }\n        }\n      }\n    }\n\n    //Try to find teams for students who still have not been placed on a team\n    for (let j = randomStudents.length - 1; j >= 0; j--) {\n      if (findTeamForStudent(randomStudents[j], newTeams, numOfPrefProjects, maxTeamSize)) {\n        randomStudents.splice(j, 1);\n      }\n    }\n\n    //Check if a student couldn't be assigned to any of their choices\n    if (randomStudents.length > 1) {\n      console.log(randomStudents)\n      console.log('Students who responded could not be placed on team based on choices');\n    }\n\n    let smallTeams = [];\n    let largeTeams = [];\n\n    //seperate teams into categories based on size\n    for (let teamName in newTeams) {\n      if (newTeams[teamName].members.length < 3) {\n        smallTeams.push(newTeams[teamName]);\n      } else if (newTeams[teamName].members.length > 3) {\n        largeTeams.push(newTeams[teamName]);\n      }\n    }\n\n    //go through every small team and check if students from larger teams can be swapped over\n/*     smallTeams.forEach((sTeam) => {\n      largeTeams.forEach((lTeam) => {\n        for (let k = lTeam.members.length - 1; k >= 0; k--) {\n          let member = lTeam.members[k];\n          if (member.returning || member.assigned) {\n            continue;\n          }\n\n          member.choices.forEach((choice, ind) => {\n            if (choice === sTeam.project.name) {\n              member.choice_num_awarded = ind + 1;\n              newTeams[`${sTeam.project.name}`].members.push(member);\n              newTeams[`${lTeam.project.name}`].members.splice(k, 1);\n            }\n          });\n\n          if (newTeams[`${sTeam.project.name}`].members.length >= 3) {\n            break;\n          }\n        }\n      })\n\n    }) */\n\n    let unassignedReturn = 0;\n    let unassignedNormal = 0;\n    randomStudents.forEach(student => {\n      student.returning ? unassignedReturn++ : unassignedNormal++;\n    });\n\n    //Calculate weights for choices and classification\n    let teamAverageChoice = 0;\n    let teamAverageClass = 0;\n    let totalWeighedTeams = 0;\n    for (let team in newTeams) {\n      let teamTotalClass = 0;\n      let teamTotalChoice = 0;\n\n      //Filter out assigned and returning students from calculations\n      let teamMembers = newTeams[team].members.filter(student =>\n        student.returning || student.assigned ? false : true\n      );\n\n      if (teamMembers.length === 0) {\n        continue;\n      }\n\n      //Calculate the average choice and spread of students by classsification\n      teamMembers.forEach(student => {\n        teamTotalChoice += student.choice_num_awarded;\n        switch (student.classification) {\n          case 'Freshman':\n            teamTotalClass += -2;\n            break;\n          case 'Sophomore':\n            teamTotalClass += -1;\n            break;\n          case 'Junior':\n            teamTotalClass += 1;\n            break;\n          case 'Senior':\n            teamTotalClass += 2;\n            break;\n          default:\n            break;\n        }\n      });\n      teamAverageChoice += teamTotalChoice / teamMembers.length;\n      teamAverageClass += teamTotalClass / teamMembers.length;\n      totalWeighedTeams++;\n    }\n\n    //Value is the average choice a student is given. The lower the better\n\n    let avgScoreChoice = teamAverageChoice / totalWeighedTeams;\n    //Value is weight ranging from 0 to 1. The closer to 0, the better spread of students by grade\n    let avgScoreClass = Math.abs(teamAverageClass / totalWeighedTeams) / 2;\n\n    let skillsMet = 0;\n    //For each team find how many skills are met by its members\n    for (let team in newTeams) {\n      newTeams[team].skillsMet = 0;\n      for (let skill of newTeams[team].project.skills) {\n        for (let member of newTeams[team].members) {\n          if (member.skills.includes(skill)) {\n            skillsMet++;\n            newTeams[team].skillsMet++;\n          }\n        }\n      }\n    }\n\n    //average skills met per team\n    let avgSkillsMet = skillsMet / Object.keys(newTeams).length;\n\n    let temp = 0;\n    for (let team in newTeams) {\n      temp += Math.exp(newTeams[team].skillsMet - avgSkillsMet, 2);\n    }\n\n    let staDevSkillsMet = Math.sqrt(temp / skillsMet);\n\n    //use normalized average and coefficient of variation as weights\n    let skillsMetWeight =\n      avgSkillsMet / newTeams[Object.keys(newTeams)[0]].project.skills.length + (staDevSkillsMet / avgSkillsMet) * -0.2;\n\n    let totalMembers = 0;\n    for (let team in newTeams) {\n      totalMembers += newTeams[team].members.length;\n    }\n\n    let avgMembersPerTeam = totalMembers / Object.keys(newTeams).length;\n    temp = 0;\n    for (let team in newTeams) {\n      temp += Math.exp(newTeams[team].members.length - avgMembersPerTeam, 2);\n    }\n\n    let coVarMembers = Math.sqrt(temp / totalMembers) / avgMembersPerTeam;\n\n    teamCombos.push({\n      teams: newTeams,\n      avgScoreChoice,\n      avgScoreClass,\n      skillsMetRatio: skillsMetWeight,\n      coVarMembers,\n      unassignedReturn,\n      unassignedNormal,\n      noResponseStudents,\n      unassignedStudents: randomStudents\n    });\n  }\n  if (wrongNames.length) \n    alert(`Following students have nonexistent choices: \\n ${[...new Set(wrongNames)].join(\"\\n\")}`)\n\n  return {\n    type: INITIATE_TEAM_GENERATION,\n    payload: teamCombos\n  };\n};\n\nfunction findTeamForStudent(student, teams, numOfPrefProjects, maxTeamSize) {\n  //Iterate through student's choices\n  for (let i = 0; i < numOfPrefProjects && i < student.choices.length; i++) {\n    let team = teams[`${student.choices[i]}`];\n    if (!team) {\n      console.log(`choice ${i} for ${student.id}`, student.choices[i]);\n    }\n    //Check if member on team has another choice which they can switch to\n    for (let j = team.members.length - 1; j >= 0; j--) {\n      if (!team.members[j].returning && !team.members[j].assigned) {\n        for (let k = 0; k < numOfPrefProjects; k++) {\n          //If member can be moved to new team, move student and then add other student to team\n          if (!teams[`${team.members[j].choices[k]}`]) console.log(\"other\", team.members[j].choices[k], team.members[j])\n          if (teams[`${team.members[j].choices[k]}`].members.length < maxTeamSize) {\n            team.members[j].choice_num_awarded = k + 1;\n            student.choice_num_awarded = i + 1;\n\n            teams[`${team.members[j].choices[k]}`].members.push(team.members[j]);\n            team.members.splice(j, 1);\n            team.members.push(student);\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport const selectCombination = value => {\n  return {\n    type: SELECT_TEAM_COMBINATION,\n    payload: value\n  };\n};\n","import SetupPage from '../components/SetupPage';\nimport { connect } from 'react-redux';\nimport {\n  changeNumOfPreferredProjects,\n  assignProjToStudents,\n  changeProjectsArray,\n  changeStudentsArray,\n  removeStudent,\n  setMaxPossibleChoices,\n  setMaxTeamSize\n} from 'actions/setupPageActions.js';\n\nimport { selectCombination } from 'actions/teamBuilderPageActions';\nimport {\n  getNumOfPreferredProjects,\n  getMaxTeamSize,\n  getStudents,\n  getProjects,\n  getManuallyAssignedStudents,\n  getMaxPossibleChoices\n} from 'reducers';\n\nconst mapStateToProps = state => ({\n  numOfPrefProjects: getNumOfPreferredProjects(state),\n  students: getStudents(state),\n  projects: getProjects(state),\n  manuallyAssignedStudents: getManuallyAssignedStudents(state),\n  maxPossibleChoices: getMaxPossibleChoices(state),\n  maxTeamSize: getMaxTeamSize(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeNumOfPreferredProjects: value => dispatch(changeNumOfPreferredProjects(value)),\n  changeProjectsArray: value => dispatch(changeProjectsArray(value)),\n  changeStudentsArray: value => dispatch(changeStudentsArray(value)),\n  assignProjToStudents: value => dispatch(assignProjToStudents(value)),\n  removeStudent: value => dispatch(removeStudent(value)),\n  selectCombination: comboInformation => dispatch(selectCombination(comboInformation)),\n  setMaxPossibleChoices: value => dispatch(setMaxPossibleChoices(value)),\n  setMaxTeamSize: value => dispatch(setMaxTeamSize(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SetupPage);\n","import {\n  CHANGE_NUM_PROJECT_SLIDER,\n  CHANGE_PROJECTS_ARRAY,\n  CHANGE_STUDENTS_ARRAY,\n  ASSIGN_PROJ_TO_STUDENT,\n  REMOVE_STUDENT,\n  SET_MAX_POSSIBLE_CHOICES,\n  SET_MAX_TEAM_SIZE\n} from './actionTypes/setupPageActionTypes';\n\nexport const removeStudent = value => {\n  return {\n    type: REMOVE_STUDENT,\n    payload: value\n  };\n};\n\nexport const changeNumOfPreferredProjects = value => {\n  return {\n    type: CHANGE_NUM_PROJECT_SLIDER,\n    payload: value\n  };\n};\n\nexport const changeProjectsArray = value => {\n  return {\n    type: CHANGE_PROJECTS_ARRAY,\n    payload: value\n  };\n};\n\nexport const changeStudentsArray = value => {\n  return {\n    type: CHANGE_STUDENTS_ARRAY,\n    payload: value\n  };\n};\n\nexport const assignProjToStudents = value => {\n  return {\n    type: ASSIGN_PROJ_TO_STUDENT,\n    payload: value\n  };\n};\n\nexport const setMaxPossibleChoices = value => {\n  return {\n    type: SET_MAX_POSSIBLE_CHOICES,\n    payload: value\n  };\n};\n\nexport const setMaxTeamSize = value => {\n  return {\n    type: SET_MAX_TEAM_SIZE,\n    payload: value\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AttributeCheckboxes = ({ setChecked, checked }) => {\n  const categories = [\n    { value: 'avgScoreChoice', display_name: 'Project Preference' },\n    { value: 'avgScoreClass', display_name: 'Classification' },\n    { value: 'skillsMetRatio', display_name: 'Skill Match' }\n  ];\n\n  const handleToggle = c => () => {\n    const currentCategoryName = checked.indexOf(c);\n    const newCheckedCategory = [...checked];\n    if (currentCategoryName === -1) {\n      newCheckedCategory.push(c);\n    } else {\n      newCheckedCategory.splice(currentCategoryName, 1);\n    }\n    setChecked(newCheckedCategory);\n  };\n\n  return categories.map((c, i) => (\n    <div className='px-4 font-weight-bold attribute-checkboxes' key={i}>\n      <div className='checkbox' onClick={handleToggle(c.value)}>\n        <div className='checkbox-pos'>{checked.indexOf(c.value) === -1 ? null : checked.indexOf(c.value) + 1}</div>\n      </div>\n      {/* <input\n        type='checkbox'\n        className='form-check-input'\n        onChange={handleToggle(c.value)}\n        value={checked.indexOf(c.value === -1)}\n      /> */}\n      <label className='form-check-label ml-3'>{c.display_name}</label>\n    </div>\n  ));\n};\n\nAttributeCheckboxes.propTypes = {\n  setChecked: PropTypes.func,\n  checked: PropTypes.array\n};\n\nexport default AttributeCheckboxes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TeamComboRow({ combo, index, selectCombination, selectTeam }) {\n  const onSelectHandler = () => {\n    selectCombination(combo);\n    selectTeam({});\n  };\n\n  return (\n    <React.Fragment>\n      <td>\n        <div className='text-danger font-weight-bolder'>Combination {index + 1}</div>\n        <div>Avg Project Preference Choice: {combo.avgScoreChoice.toFixed(3)}</div>\n        <div>Classification Weight: {combo.avgScoreClass.toFixed(3)}</div>\n        <div>Percent of Skills Matched: {combo.skillsMetRatio.toFixed(3)}</div>\n        <div>Members Per Team Weight: {combo.coVarMembers.toFixed(3)}</div>\n        {/* <div>Unassigned Return:  {combo.unassignedReturn}</div>\n                                            <div>Unassigned Return:  {combo.unassignedReturn}</div> */}\n        <div>Unassigned Student(s): {combo.unassignedStudents.length}</div>\n      </td>\n      <td>\n        <button onClick={onSelectHandler} className='dark-gray text-center' style={{ width: '8rem' }}>\n          Select\n        </button>\n      </td>\n    </React.Fragment>\n  );\n}\n\nTeamComboRow.propTypes = {\n  combo: PropTypes.object,\n  index: PropTypes.number,\n  selectCombination: PropTypes.func,\n  selectTeam: PropTypes.func\n};\n\nexport default TeamComboRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Table, CardDeck, Spinner } from 'react-bootstrap';\nimport TeamComboRow from './TeamComboRow';\nimport { orderBy } from 'lodash';\n\n/* eslint-disable react/prop-types */\nfunction DisplayTeamCombinations({ teamCombos = [], selectCombo, regrenerateTeam, selectTeam, checked, loading }) {\n  function renderLoading() {\n    return (\n      <div style={{ height: '50vh' }} className='d-flex justify-content-center align-items-center'>\n        <Spinner animation='border' role='status' size='lg'></Spinner>\n      </div>\n    );\n  }\n\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>Total Combinations: {teamCombos.length} </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            {loading ? (\n              renderLoading()\n            ) : (\n              <Table striped bordered hover>\n                <tbody>\n                  {orderBy(\n                    teamCombos,\n                    [...checked, 'coVarMembers'],\n                    [...checked.map(attribute => (attribute === 'skillsMetRatio' ? 'desc' : 'asc')), 'asc']\n                  ).map((combo, index) => {\n                    return (\n                      <tr key={index}>\n                        <TeamComboRow\n                          selectCombination={selectCombo}\n                          selectTeam={selectTeam}\n                          combo={combo}\n                          index={index}\n                        />\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            )}\n          </Card>\n        </CardDeck>\n        <div className='text-info'>\n          Number of No Response Students: {teamCombos[0] ? teamCombos[0].noResponseStudents.length : null}\n        </div>\n        <div className='text-center' style={{ marginTop: '.5rem' }}>\n          <button onClick={regrenerateTeam} className='px-3 py-2 orange' style={{ borderRadius: '16px' }}>\n            Regenerate Teams\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n/* eslint-enable react/prop-types */\n\nDisplayTeamCombinations.propTypes = {\n  selectCombo: PropTypes.func,\n  selectTeam: PropTypes.func,\n  teamCombos: PropTypes.array,\n  regrenerateTeam: PropTypes.func,\n  checked: PropTypes.array\n};\n\nexport default DisplayTeamCombinations;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DisplayProjectRow({ combo, selectTeam, teamName }) {\n  const onSelectHandlerMembers = () => {\n    selectTeam(combo.teams[teamName]);\n  };\n\n  return (\n    <Fragment>\n      <td>\n        <div className={Object.keys(combo.teams[teamName].members).length < 3 ? 'text-danger' : null}>{teamName}</div>\n        <div className='text-danger small'>\n          {Object.keys(combo.teams[teamName].members).length < 3 ? '*Minimum team size not met' : null}\n        </div>\n      </td>\n      <td>\n        <button onClick={onSelectHandlerMembers} style={{ width: '8rem' }} className='dark-gray text-center'>\n          Select\n        </button>\n      </td>\n    </Fragment>\n  );\n}\n\nDisplayProjectRow.propTypes = {\n  combo: PropTypes.object,\n  selectTeam: PropTypes.func,\n  teamName: PropTypes.string\n};\n\nexport default DisplayProjectRow;\n","/* eslint-disable react/jsx-key */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport DisplayProjectRow from './DisplayProjectRow';\nimport { CSVLink } from 'react-csv';\n\nconst DisplayProjects = ({ combo = {}, selectTeam }) => {\n  let headers = [\n    { label: 'Team', key: 'Team' },\n    { label: 'Student', key: 'Student' },\n    { label: 'Choice 1', key: 'Choice 1' },\n    { label: 'Choice 2', key: 'Choice 2' },\n    { label: 'Choice 3', key: 'Choice 3' },\n    { label: 'Choice 4', key: 'Choice 4' },\n    { label: 'Choice 5', key: 'Choice 5' },\n    { label: 'Choice 6', key: 'Choice 6' },\n    { label: 'Student Major', key: 'Student Major' },\n    { label: 'Student Classification', key: 'Student Classification' },\n    { label: 'Gender', key: 'Gender' },\n    { label: 'Skill 1', key: 'Skill 1' },\n    { label: 'Skill 2', key: 'Skill 2' },\n    { label: 'Skill 3', key: 'Skill 3' }\n  ];\n\n  function getCSV() {\n    var newData = [];\n    if (combo.teams) {\n      let teams = combo.teams;\n\n      Object.keys(teams).forEach(teamName => {\n        let membersArr = teams[teamName].members;\n        if (membersArr && membersArr.length > 0) {\n          for (let i = 0; i < membersArr.length; i++) {\n            let rowData = {};\n            let member = membersArr[i];\n            rowData['Team'] = teamName;\n            if (member['id']) {\n              rowData['Student'] = member['name'].trim();\n              let choiceRows = member['choices'].map(s => {\n                return s.trim();\n              });\n              for (let j = 1; j <= choiceRows.length; j++) {\n                let strRow = 'Choice ' + j;\n                rowData[strRow] = choiceRows[j - 1];\n              }\n              rowData['Student Major'] = member['major'].trim();\n              rowData['Student Classification'] = member['classification'].trim();\n              rowData['Gender'] = member['gender'].trim();\n              let skillSet = member['skills'].map(s => s.trim());\n              for (let j = 1; j <= skillSet.length; j++) {\n                let skillRow = 'Skill ' + j;\n                rowData[skillRow] = skillSet[j - 1];\n              }\n            }\n            newData.push(rowData);\n          }\n        }\n      });\n    }\n    return newData;\n  }\n\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>\n        Total Projects: {combo.teams ? <span>{Object.keys(combo.teams).length}</span> : null}\n      </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              <tbody>\n                {combo.teams\n                  ? Object.keys(combo.teams).map((teamName, index) => (\n                      <tr key={index}>\n                        <DisplayProjectRow combo={combo} selectTeam={selectTeam} teamName={teamName} />\n                      </tr>\n                    ))\n                  : null}\n              </tbody>\n            </Table>\n          </Card>\n        </CardDeck>\n        <div className='text-center mt-3'>\n          <CSVLink data={getCSV()} headers={headers} className='px-3 py-2 orange'>\n            <button className='px-3 py-2 orange' style={{ borderRadius: '16px' }}>\n              Export\n            </button>\n          </CSVLink>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDisplayProjects.propTypes = {\n  selectTeam: PropTypes.func,\n  combo: PropTypes.object\n};\n// /*//npm install react-csv --save*/\nexport default DisplayProjects;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst DisplayTeamInformations = ({ team }) => {\n  return (\n    <div className='pb-4'>\n      <div className='px-3 text-info'>\n        {/* <div> {team.project?  (<span>{team.project.name}</span>) :null}</div> */}\n        Total Members: {team.members ? <span>{team.members.length}</span> : null}\n      </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              {team.project ? (\n                <tbody>\n                  <tr className='team-classmate-row'>\n                    <td>\n                      <div className='text-danger font-weight-bolder'>Project Info: </div>\n                      <div>{team.project.name}</div>\n                      <div>Returning: {team.project.returning + ''}</div>\n                      <div>Skills: </div>\n                      <Col>\n                        {team.project.skills.map((skill, key) => (\n                          <div key={key}>\n                            {key + 1 + ': '}\n                            {skill}\n                          </div>\n                        ))}\n                      </Col>\n                    </td>\n                  </tr>\n\n                  {team.members.map((member, index) => (\n                    <tr className='team-classmate-row' key={index}>\n                      <td>\n                        {!index ? <div className='text-danger font-weight-bolder'>Student Info: </div> : null}\n                        <div>Name: {member.name}</div>\n                        <div>Id: {member.id}</div>\n                        <div>Major: {member.major}</div>\n                        <div>Year: {member.classification}</div>\n                        <div>Gender: {member.gender}</div>\n                        <div>Response: {'' + member.response}</div>\n                        <div>Choice: {member.choice_num_awarded}</div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              ) : null}\n            </Table>\n          </Card>\n        </CardDeck>\n      </div>\n    </div>\n  );\n};\n\nDisplayTeamInformations.propTypes = {\n  team: PropTypes.object\n};\n\nexport default DisplayTeamInformations;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Card, Table, CardDeck } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst DisplayUnassignedStudents = ({ students }) => {\n  return (\n    <div className='pb-4'>\n    <div className='px-3 text-info'>\n      Total Unassigned Students: {students ? <span>{students.length}</span> : null}\n    </div>\n      <div className='teamcombination-wrapper p-3'>\n        <CardDeck className='tables-container'>\n          <Card className='table-card' border='dark'>\n            <Table striped bordered hover>\n              {students ? (\n                <tbody>\n                  {students.map((member, index) => (\n                    <tr className='team-classmate-row' key={index}>\n                      <td>\n                        {!index ? <div className='text-danger font-weight-bolder'>Student Info: </div> : null}\n                        <div>Name: {member.name}</div>\n                        <div>Id: {member.id}</div>\n                        <div>Major: {member.major}</div>\n                        <div>Year: {member.classification}</div>\n                        <div>Gender: {member.gender}</div>\n                        <div>Response: {'' + member.response}</div>\n                        <div>Choice: {member.choice_num_awarded}</div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              ) : null}\n            </Table>\n          </Card>\n        </CardDeck>\n      </div>\n    </div>\n  );\n};\n\nDisplayUnassignedStudents.propTypes = {\n  team: PropTypes.object\n};\n\nexport default DisplayUnassignedStudents;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from 'widgets/common/Header';\nimport AttributeCheckboxes from './AttributeCheckboxes';\nimport DisplayTeamCombinations from './TeamCombinationTable/DisplayTeamCombinations';\nimport { Row, Col } from 'react-bootstrap';\nimport DisplayProjects from './DisplayProjectsTable/DisplayProjects';\nimport DisplayTeamInformations from './DisplayTeamInformations';\nimport DisplayUnassignedStudents from './DisplayUnassignedStudents';\n//npm startimport * as FileSaver from 'file-saver';\n//import * as XLSX from 'xlsx';\n\nclass TeamBuilderPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      combo: {},\n      team: {},\n      checked: [],\n      showTooltip: false\n    };\n  }\n\n  componentDidMount() {\n    this.waitToGenerateTeams();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.teamCombos !== prevProps.teamCombos || prevState.checked !== this.state.checked) {\n      this.setState({ loading: false });\n    }\n  }\n\n  setCombo = combo => {\n    this.setState({ combo });\n  };\n\n  setTeam = team => {\n    this.setState({ team });\n  };\n\n  setChecked = checked => {\n    this.setState({ loading: true }, () => {\n      setTimeout(() => {\n        this.setState({ checked });\n      }, 100);\n    });\n  };\n\n  waitToGenerateTeams() {\n    //Let component fully render before dispatching\n    setTimeout(() => {\n      const { students, projects, manuallyAssignedStudents, numOfPrefProjects, generateTeams, maxTeamSize } = this.props;\n      generateTeams({ students, projects, manuallyAssignedStudents, numOfPrefProjects, maxTeamSize });\n    }, 100);\n  }\n\n  regrenerateTeam = () => {\n    this.setState({ loading: true, combo: {}, team: {} });\n    this.waitToGenerateTeams();\n  };\n\n  selectCombo = comboInformation => {\n    this.props.selectCombination(comboInformation);\n  };\n\n  exportBtn = () => {\n    alert('Does not work!!');\n  };\n\n  switchTooltipText = e => {\n    e.stopPropagation();\n    this.setState({ showTooltip: !this.state.showTooltip });\n  };\n\n  hideTooltipText = () => {\n    this.setState({ showTooltip: false });\n  };\n\n  renderTopSection = () => (\n    <div className='team-builder-header-options'>\n      <button onClick={this.props.switchToSetup} className='px-3 py-2 back-button green'>\n        Go Back\n      </button>\n      <div className='team-builder-attributes'>\n        <div className='font-weight-bolder py-2' style={{ display: 'inline-block' }}>\n          <h3 className='attribute-header'>Attribute Importance</h3>\n          <div className='attribute-tooltip' onClick={this.switchTooltipText}>\n            <div className='tooltip-question-mark'>?</div>\n            {!this.state.showTooltip ? null : (\n              <div className='tooltip-textbox'>\n                Numbers that appear in checkboxes displays the order in which the table is sorted by.\n                <br />\n                <b>Avg Project Preference Choice</b>: The average project choice a student is given.\n                <br />\n                <b>Classification Weight</b>: Considers spread of student classification per team. The closer to 0 the\n                better.\n                <br />\n                <b>Percent of Skills Matched</b>: The percentage of skills matched by the students in all the teams. (A\n                team skill is matched if at least one student on the team matches it)\n                <br />\n                <b>Members Per Team Weight</b>: Considers spread of students across teams. The closer to 0, the better.\n                Always sorted by this value since filling out teams is always the most important.\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='d-md-flex md-flex-row justify-content-center'>\n          <AttributeCheckboxes setChecked={this.setChecked} checked={this.state.checked} />\n        </div>\n      </div>\n    </div>\n  );\n\n  renderTeamCombinations = () => {\n    const { teamCombos } = this.props;\n    return (\n      <div className='team-combo-view'>\n        <div className='font-weight-bolder text-center'>\n          <h4>Team Combinations</h4>\n        </div>\n        <DisplayTeamCombinations\n          teamCombos={teamCombos}\n          selectCombination={this.selectCombo}\n          selectCombo={this.setCombo}\n          selectTeam={this.setTeam}\n          regrenerateTeam={this.regrenerateTeam}\n          checked={this.state.checked}\n          loading={this.state.loading}\n        />\n      </div>\n    );\n  };\n\n  renderViewProjects = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center '>\n        <h4>View Projects</h4>\n      </div>\n      <DisplayProjects combo={this.state.combo} selectTeam={this.setTeam} exportBtn={this.exportBtn} />\n    </div>\n  );\n\n  renderUnassignedStudents = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center '>\n        <h4>Unassigned Students</h4>\n      </div>\n      <DisplayUnassignedStudents students={this.state.combo.unassignedStudents} />\n    </div>\n  );\n\n  renderTeamInformations = () => (\n    // <div className='py-2' style={{ height: 'auto' }}>\n    <div className='team-combo-view'>\n      <div className='font-weight-bolder text-center'>\n        <h4>Team Informations</h4>\n      </div>\n      <DisplayTeamInformations team={this.state.team} />\n    </div>\n  );\n\n  render() {\n    return (\n      <div className='team-builder-page' onClick={this.hideTooltipText}>\n        <Header />\n        {this.renderTopSection()}\n        <Row>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderTeamCombinations()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderUnassignedStudents()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderViewProjects()}\n          </Col>\n          <Col xs={12} md={3} className='bg-light'>\n            {this.renderTeamInformations()}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nTeamBuilderPage.propTypes = {\n  numOfPrefProjects: PropTypes.number,\n  students: PropTypes.array,\n  projects: PropTypes.array,\n  switchToSetup: PropTypes.func,\n  manuallyAssignedStudents: PropTypes.object,\n  teamCombos: PropTypes.array,\n  generateTeams: PropTypes.func,\n  selectCombination: PropTypes.func,\n  selectProjects: PropTypes.func,\n  selectMembers: PropTypes.func\n};\n\nexport default TeamBuilderPage;\n","import TeamBuilderPage from 'widgets/TeamBuilderPage/components/TeamBuilderPage';\nimport { connect } from 'react-redux';\nimport { generateTeams, selectCombination } from 'actions/teamBuilderPageActions';\nimport {\n  getNumOfPreferredProjects,\n  getStudents,\n  getProjects,\n  getManuallyAssignedStudents,\n  getMaxTeamSize,\n  getTeamCombos\n} from 'reducers';\n\nconst mapStateToProps = state => ({\n  numOfPrefProjects: getNumOfPreferredProjects(state),\n  students: getStudents(state),\n  projects: getProjects(state),\n  manuallyAssignedStudents: getManuallyAssignedStudents(state),\n  teamCombos: getTeamCombos(state),\n  maxTeamSize: getMaxTeamSize(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  generateTeams: teamInformation => dispatch(generateTeams(teamInformation)),\n  selectCombination: comboInformation => dispatch(selectCombination(comboInformation))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamBuilderPage);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport SetupPage from 'widgets/SetupPage/containers/SetupPageContainer';\nimport TeamBuilderPage from 'widgets/TeamBuilderPage/containers/TeamBuilderPageContainer';\n\nexport default class EpicsTeamBuilder extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      showSetupPage: true\n    };\n  }\n\n  switchToTeamBuilder = () => {\n    this.setState({ showSetupPage: false });\n  };\n\n  switchToSetup = () => {\n    this.setState({ showSetupPage: true });\n  };\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className='epics-team-builder'>\n          <div className='gray-background' />\n          {this.state.showSetupPage ? (\n            <SetupPage switchToTeamBuilder={this.switchToTeamBuilder} />\n          ) : (\n            <TeamBuilderPage switchToSetup={this.switchToSetup} />\n          )}\n        </div>\n      </Provider>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport '../node_modules/nouislider/distribute/nouislider.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport EpicsTeamBuilder from './EpicsTeamBuilder';\n\nReactDOM.render(<EpicsTeamBuilder />, document.getElementById('root'));\n"],"sourceRoot":""}